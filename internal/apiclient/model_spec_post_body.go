/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the SpecPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecPostBody{}

// SpecPostBody struct for SpecPostBody
type SpecPostBody struct {
	// The name of a spec.
	Name string `json:"name"`
	// A specification. Can be Swagger 2.0 or OAS 3.0. Must be base64 encoded.
	Spec                 *string `json:"spec,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpecPostBody SpecPostBody

// NewSpecPostBody instantiates a new SpecPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecPostBody(name string) *SpecPostBody {
	this := SpecPostBody{}
	this.Name = name
	return &this
}

// NewSpecPostBodyWithDefaults instantiates a new SpecPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecPostBodyWithDefaults() *SpecPostBody {
	this := SpecPostBody{}
	return &this
}

// GetName returns the Name field value
func (o *SpecPostBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpecPostBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpecPostBody) SetName(v string) {
	o.Name = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *SpecPostBody) GetSpec() string {
	if o == nil || IsNil(o.Spec) {
		var ret string
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecPostBody) GetSpecOk() (*string, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *SpecPostBody) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given string and assigns it to the Spec field.
func (o *SpecPostBody) SetSpec(v string) {
	o.Spec = &v
}

func (o SpecPostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpecPostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpecPostBody := _SpecPostBody{}

	err = json.Unmarshal(data, &varSpecPostBody)

	if err != nil {
		return err
	}

	*o = SpecPostBody(varSpecPostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "spec")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpecPostBody struct {
	value *SpecPostBody
	isSet bool
}

func (v NullableSpecPostBody) Get() *SpecPostBody {
	return v.value
}

func (v *NullableSpecPostBody) Set(val *SpecPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecPostBody(val *SpecPostBody) *NullableSpecPostBody {
	return &NullableSpecPostBody{value: val, isSet: true}
}

func (v NullableSpecPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
