/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type RulesDependenciesAPI interface {

	/*
		UpdateRulesDependencies Update rules dependencies

		Updates rules dependencies for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@return ApiUpdateRulesDependenciesRequest
	*/
	UpdateRulesDependencies(ctx context.Context, orgId string) ApiUpdateRulesDependenciesRequest

	// UpdateRulesDependenciesExecute executes the request
	//  @return []RulesDependenciesPutBodyInner
	UpdateRulesDependenciesExecute(r ApiUpdateRulesDependenciesRequest) ([]RulesDependenciesPutBodyInner, *http.Response, error)
}

// RulesDependenciesAPIService RulesDependenciesAPI service
type RulesDependenciesAPIService service

type ApiUpdateRulesDependenciesRequest struct {
	ctx                           context.Context
	ApiService                    RulesDependenciesAPI
	orgId                         string
	rulesDependenciesPutBodyInner *[]RulesDependenciesPutBodyInner
}

// Request body for updating rule dependencies.
func (r ApiUpdateRulesDependenciesRequest) RulesDependenciesPutBodyInner(rulesDependenciesPutBodyInner []RulesDependenciesPutBodyInner) ApiUpdateRulesDependenciesRequest {
	r.rulesDependenciesPutBodyInner = &rulesDependenciesPutBodyInner
	return r
}

func (r ApiUpdateRulesDependenciesRequest) Execute() ([]RulesDependenciesPutBodyInner, *http.Response, error) {
	return r.ApiService.UpdateRulesDependenciesExecute(r)
}

/*
UpdateRulesDependencies Update rules dependencies

Updates rules dependencies for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@return ApiUpdateRulesDependenciesRequest
*/
func (a *RulesDependenciesAPIService) UpdateRulesDependencies(ctx context.Context, orgId string) ApiUpdateRulesDependenciesRequest {
	return ApiUpdateRulesDependenciesRequest{
		ApiService: a,
		ctx:        ctx,
		orgId:      orgId,
	}
}

// Execute executes the request
//
//	@return []RulesDependenciesPutBodyInner
func (a *RulesDependenciesAPIService) UpdateRulesDependenciesExecute(r ApiUpdateRulesDependenciesRequest) ([]RulesDependenciesPutBodyInner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RulesDependenciesPutBodyInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RulesDependenciesAPIService.UpdateRulesDependencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rules_dependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return localVarReturnValue, nil, reportError("orgId must have less than 36 elements")
	}
	if r.rulesDependenciesPutBodyInner == nil {
		return localVarReturnValue, nil, reportError("rulesDependenciesPutBodyInner is required and must be specified")
	}
	if len(*r.rulesDependenciesPutBodyInner) < 1 {
		return localVarReturnValue, nil, reportError("rulesDependenciesPutBodyInner must have at least 1 elements")
	}
	if len(*r.rulesDependenciesPutBodyInner) > 1000 {
		return localVarReturnValue, nil, reportError("rulesDependenciesPutBodyInner must have less than 1000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rulesDependenciesPutBodyInner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CompilationDiagnostics
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
