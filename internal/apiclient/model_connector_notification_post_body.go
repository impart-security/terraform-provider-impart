/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectorNotificationPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorNotificationPostBody{}

// ConnectorNotificationPostBody struct for ConnectorNotificationPostBody
type ConnectorNotificationPostBody struct {
	// The text payload to be sent in the notification.
	Payload string `json:"payload"`
	// The text for the subject of the message payload.
	Subject *string `json:"subject,omitempty"`
	// An array of ids for where the notification should be sent.
	Destination          []string `json:"destination,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectorNotificationPostBody ConnectorNotificationPostBody

// NewConnectorNotificationPostBody instantiates a new ConnectorNotificationPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorNotificationPostBody(payload string) *ConnectorNotificationPostBody {
	this := ConnectorNotificationPostBody{}
	this.Payload = payload
	return &this
}

// NewConnectorNotificationPostBodyWithDefaults instantiates a new ConnectorNotificationPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorNotificationPostBodyWithDefaults() *ConnectorNotificationPostBody {
	this := ConnectorNotificationPostBody{}
	return &this
}

// GetPayload returns the Payload field value
func (o *ConnectorNotificationPostBody) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *ConnectorNotificationPostBody) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *ConnectorNotificationPostBody) SetPayload(v string) {
	o.Payload = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ConnectorNotificationPostBody) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNotificationPostBody) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ConnectorNotificationPostBody) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ConnectorNotificationPostBody) SetSubject(v string) {
	o.Subject = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *ConnectorNotificationPostBody) GetDestination() []string {
	if o == nil || IsNil(o.Destination) {
		var ret []string
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNotificationPostBody) GetDestinationOk() ([]string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *ConnectorNotificationPostBody) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []string and assigns it to the Destination field.
func (o *ConnectorNotificationPostBody) SetDestination(v []string) {
	o.Destination = v
}

func (o ConnectorNotificationPostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorNotificationPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payload"] = o.Payload
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectorNotificationPostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorNotificationPostBody := _ConnectorNotificationPostBody{}

	err = json.Unmarshal(data, &varConnectorNotificationPostBody)

	if err != nil {
		return err
	}

	*o = ConnectorNotificationPostBody(varConnectorNotificationPostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payload")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "destination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectorNotificationPostBody struct {
	value *ConnectorNotificationPostBody
	isSet bool
}

func (v NullableConnectorNotificationPostBody) Get() *ConnectorNotificationPostBody {
	return v.value
}

func (v *NullableConnectorNotificationPostBody) Set(val *ConnectorNotificationPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorNotificationPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorNotificationPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorNotificationPostBody(val *ConnectorNotificationPostBody) *NullableConnectorNotificationPostBody {
	return &NullableConnectorNotificationPostBody{value: val, isSet: true}
}

func (v NullableConnectorNotificationPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorNotificationPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
