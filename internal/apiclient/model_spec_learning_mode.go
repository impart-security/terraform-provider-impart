/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// SpecLearningMode Spec learning mode configuration options.
type SpecLearningMode string

// List of spec_learning_mode
const (
	SPECLEARNINGMODE_ALL          SpecLearningMode = "all"
	SPECLEARNINGMODE_PATHS_ONLY   SpecLearningMode = "paths_only"
	SPECLEARNINGMODE_PATHS_CUSTOM SpecLearningMode = "paths_custom"
)

// All allowed values of SpecLearningMode enum
var AllowedSpecLearningModeEnumValues = []SpecLearningMode{
	"all",
	"paths_only",
	"paths_custom",
}

func (v *SpecLearningMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpecLearningMode(value)
	for _, existing := range AllowedSpecLearningModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpecLearningMode", value)
}

// NewSpecLearningModeFromValue returns a pointer to a valid SpecLearningMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpecLearningModeFromValue(v string) (*SpecLearningMode, error) {
	ev := SpecLearningMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpecLearningMode: valid values are %v", v, AllowedSpecLearningModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpecLearningMode) IsValid() bool {
	for _, existing := range AllowedSpecLearningModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to spec_learning_mode value
func (v SpecLearningMode) Ptr() *SpecLearningMode {
	return &v
}

type NullableSpecLearningMode struct {
	value *SpecLearningMode
	isSet bool
}

func (v NullableSpecLearningMode) Get() *SpecLearningMode {
	return v.value
}

func (v *NullableSpecLearningMode) Set(val *SpecLearningMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecLearningMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecLearningMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecLearningMode(val *SpecLearningMode) *NullableSpecLearningMode {
	return &NullableSpecLearningMode{value: val, isSet: true}
}

func (v NullableSpecLearningMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecLearningMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}