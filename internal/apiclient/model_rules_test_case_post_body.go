/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the RulesTestCasePostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RulesTestCasePostBody{}

// RulesTestCasePostBody struct for RulesTestCasePostBody
type RulesTestCasePostBody struct {
	// The name of the test case
	Name string `json:"name"`
	// The description of the test case
	Description *string `json:"description,omitempty"`
	// Whether the test case is required to pass when creating or updating rules.
	Required *bool `json:"required,omitempty"`
	// The messages of the test case.
	Messages []RulesTestCaseMessagesInner `json:"messages"`
	// Assertions for the test case.
	Assertions []RulesTestCaseAssertion `json:"assertions,omitempty"`
	// The applied labels.
	Labels               []string `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RulesTestCasePostBody RulesTestCasePostBody

// NewRulesTestCasePostBody instantiates a new RulesTestCasePostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesTestCasePostBody(name string, messages []RulesTestCaseMessagesInner) *RulesTestCasePostBody {
	this := RulesTestCasePostBody{}
	this.Name = name
	var required bool = false
	this.Required = &required
	this.Messages = messages
	return &this
}

// NewRulesTestCasePostBodyWithDefaults instantiates a new RulesTestCasePostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesTestCasePostBodyWithDefaults() *RulesTestCasePostBody {
	this := RulesTestCasePostBody{}
	var required bool = false
	this.Required = &required
	return &this
}

// GetName returns the Name field value
func (o *RulesTestCasePostBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RulesTestCasePostBody) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RulesTestCasePostBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RulesTestCasePostBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RulesTestCasePostBody) SetDescription(v string) {
	o.Description = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *RulesTestCasePostBody) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *RulesTestCasePostBody) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *RulesTestCasePostBody) SetRequired(v bool) {
	o.Required = &v
}

// GetMessages returns the Messages field value
func (o *RulesTestCasePostBody) GetMessages() []RulesTestCaseMessagesInner {
	if o == nil {
		var ret []RulesTestCaseMessagesInner
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetMessagesOk() ([]RulesTestCaseMessagesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *RulesTestCasePostBody) SetMessages(v []RulesTestCaseMessagesInner) {
	o.Messages = v
}

// GetAssertions returns the Assertions field value if set, zero value otherwise.
func (o *RulesTestCasePostBody) GetAssertions() []RulesTestCaseAssertion {
	if o == nil || IsNil(o.Assertions) {
		var ret []RulesTestCaseAssertion
		return ret
	}
	return o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetAssertionsOk() ([]RulesTestCaseAssertion, bool) {
	if o == nil || IsNil(o.Assertions) {
		return nil, false
	}
	return o.Assertions, true
}

// HasAssertions returns a boolean if a field has been set.
func (o *RulesTestCasePostBody) HasAssertions() bool {
	if o != nil && !IsNil(o.Assertions) {
		return true
	}

	return false
}

// SetAssertions gets a reference to the given []RulesTestCaseAssertion and assigns it to the Assertions field.
func (o *RulesTestCasePostBody) SetAssertions(v []RulesTestCaseAssertion) {
	o.Assertions = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RulesTestCasePostBody) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesTestCasePostBody) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RulesTestCasePostBody) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *RulesTestCasePostBody) SetLabels(v []string) {
	o.Labels = v
}

func (o RulesTestCasePostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RulesTestCasePostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	toSerialize["messages"] = o.Messages
	if !IsNil(o.Assertions) {
		toSerialize["assertions"] = o.Assertions
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RulesTestCasePostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRulesTestCasePostBody := _RulesTestCasePostBody{}

	err = json.Unmarshal(data, &varRulesTestCasePostBody)

	if err != nil {
		return err
	}

	*o = RulesTestCasePostBody(varRulesTestCasePostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "required")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "assertions")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRulesTestCasePostBody struct {
	value *RulesTestCasePostBody
	isSet bool
}

func (v NullableRulesTestCasePostBody) Get() *RulesTestCasePostBody {
	return v.value
}

func (v *NullableRulesTestCasePostBody) Set(val *RulesTestCasePostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesTestCasePostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesTestCasePostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesTestCasePostBody(val *RulesTestCasePostBody) *NullableRulesTestCasePostBody {
	return &NullableRulesTestCasePostBody{value: val, isSet: true}
}

func (v NullableRulesTestCasePostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesTestCasePostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
