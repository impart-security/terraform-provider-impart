/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the EventMonitorConditionMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMonitorConditionMetric{}

// EventMonitorConditionMetric struct for EventMonitorConditionMetric
type EventMonitorConditionMetric struct {
	// The type that maps to which request schema we should be using.
	Type string `json:"type" validate:"regexp=^metric$"`
	// The tag this condition operates on.
	Tag *string `json:"tag,omitempty"`
	// The spec IDs to filter for.
	SpecId []string `json:"spec_id,omitempty"`
	// The endpoint IDs to filter for.
	EndpointId []string `json:"endpoint_id,omitempty"`
	// The collection IDs to filter for.
	CollectionId         []string `json:"collection_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventMonitorConditionMetric EventMonitorConditionMetric

// NewEventMonitorConditionMetric instantiates a new EventMonitorConditionMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMonitorConditionMetric(type_ string) *EventMonitorConditionMetric {
	this := EventMonitorConditionMetric{}
	this.Type = type_
	return &this
}

// NewEventMonitorConditionMetricWithDefaults instantiates a new EventMonitorConditionMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMonitorConditionMetricWithDefaults() *EventMonitorConditionMetric {
	this := EventMonitorConditionMetric{}
	return &this
}

// GetType returns the Type field value
func (o *EventMonitorConditionMetric) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionMetric) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventMonitorConditionMetric) SetType(v string) {
	o.Type = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *EventMonitorConditionMetric) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionMetric) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *EventMonitorConditionMetric) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *EventMonitorConditionMetric) SetTag(v string) {
	o.Tag = &v
}

// GetSpecId returns the SpecId field value if set, zero value otherwise.
func (o *EventMonitorConditionMetric) GetSpecId() []string {
	if o == nil || IsNil(o.SpecId) {
		var ret []string
		return ret
	}
	return o.SpecId
}

// GetSpecIdOk returns a tuple with the SpecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionMetric) GetSpecIdOk() ([]string, bool) {
	if o == nil || IsNil(o.SpecId) {
		return nil, false
	}
	return o.SpecId, true
}

// HasSpecId returns a boolean if a field has been set.
func (o *EventMonitorConditionMetric) HasSpecId() bool {
	if o != nil && !IsNil(o.SpecId) {
		return true
	}

	return false
}

// SetSpecId gets a reference to the given []string and assigns it to the SpecId field.
func (o *EventMonitorConditionMetric) SetSpecId(v []string) {
	o.SpecId = v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *EventMonitorConditionMetric) GetEndpointId() []string {
	if o == nil || IsNil(o.EndpointId) {
		var ret []string
		return ret
	}
	return o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionMetric) GetEndpointIdOk() ([]string, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *EventMonitorConditionMetric) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given []string and assigns it to the EndpointId field.
func (o *EventMonitorConditionMetric) SetEndpointId(v []string) {
	o.EndpointId = v
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *EventMonitorConditionMetric) GetCollectionId() []string {
	if o == nil || IsNil(o.CollectionId) {
		var ret []string
		return ret
	}
	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionMetric) GetCollectionIdOk() ([]string, bool) {
	if o == nil || IsNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *EventMonitorConditionMetric) HasCollectionId() bool {
	if o != nil && !IsNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given []string and assigns it to the CollectionId field.
func (o *EventMonitorConditionMetric) SetCollectionId(v []string) {
	o.CollectionId = v
}

func (o EventMonitorConditionMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMonitorConditionMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.SpecId) {
		toSerialize["spec_id"] = o.SpecId
	}
	if !IsNil(o.EndpointId) {
		toSerialize["endpoint_id"] = o.EndpointId
	}
	if !IsNil(o.CollectionId) {
		toSerialize["collection_id"] = o.CollectionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventMonitorConditionMetric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventMonitorConditionMetric := _EventMonitorConditionMetric{}

	err = json.Unmarshal(data, &varEventMonitorConditionMetric)

	if err != nil {
		return err
	}

	*o = EventMonitorConditionMetric(varEventMonitorConditionMetric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "spec_id")
		delete(additionalProperties, "endpoint_id")
		delete(additionalProperties, "collection_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventMonitorConditionMetric struct {
	value *EventMonitorConditionMetric
	isSet bool
}

func (v NullableEventMonitorConditionMetric) Get() *EventMonitorConditionMetric {
	return v.value
}

func (v *NullableEventMonitorConditionMetric) Set(val *EventMonitorConditionMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMonitorConditionMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMonitorConditionMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMonitorConditionMetric(val *EventMonitorConditionMetric) *NullableEventMonitorConditionMetric {
	return &NullableEventMonitorConditionMetric{value: val, isSet: true}
}

func (v NullableEventMonitorConditionMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMonitorConditionMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
