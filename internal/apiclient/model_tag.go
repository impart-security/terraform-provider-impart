/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Tag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tag{}

// Tag struct for Tag
type Tag struct {
	// The tag name.
	Name string `json:"name"`
	// A formatted version of the tag name.
	DisplayName string `json:"display_name"`
	Type        string `json:"type"`
	// A description of the tag.
	Description string `json:"description"`
	// A risk statement for the tag.
	RiskStatement string           `json:"risk_statement"`
	Remediations  []TagRemediation `json:"remediations"`
	// An external URL for the tag.
	ExternalUrl string `json:"external_url"`
	// The category of the tag.
	Category string `json:"category"`
	// The applied labels.
	Labels []string `json:"labels"`
	// The unique identifier of the user who created the test case.
	CreatedBy string `json:"created_by"`
	// The date and time in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) format.
	CreatedAt time.Time `json:"created_at"`
	// The unique identifier of the user who last updated the test case.
	UpdatedBy NullableString `json:"updated_by"`
	// The date and time in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) format.
	UpdatedAt            NullableTime `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _Tag Tag

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(name string, displayName string, type_ string, description string, riskStatement string, remediations []TagRemediation, externalUrl string, category string, labels []string, createdBy string, createdAt time.Time, updatedBy NullableString, updatedAt NullableTime) *Tag {
	this := Tag{}
	this.Name = name
	this.DisplayName = displayName
	this.Type = type_
	this.Description = description
	this.RiskStatement = riskStatement
	this.Remediations = remediations
	this.ExternalUrl = externalUrl
	this.Category = category
	this.Labels = labels
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	this.UpdatedBy = updatedBy
	this.UpdatedAt = updatedAt
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetName returns the Name field value
func (o *Tag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tag) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *Tag) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Tag) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Tag) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetType returns the Type field value
func (o *Tag) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Tag) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Tag) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *Tag) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Tag) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Tag) SetDescription(v string) {
	o.Description = v
}

// GetRiskStatement returns the RiskStatement field value
func (o *Tag) GetRiskStatement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RiskStatement
}

// GetRiskStatementOk returns a tuple with the RiskStatement field value
// and a boolean to check if the value has been set.
func (o *Tag) GetRiskStatementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RiskStatement, true
}

// SetRiskStatement sets field value
func (o *Tag) SetRiskStatement(v string) {
	o.RiskStatement = v
}

// GetRemediations returns the Remediations field value
func (o *Tag) GetRemediations() []TagRemediation {
	if o == nil {
		var ret []TagRemediation
		return ret
	}

	return o.Remediations
}

// GetRemediationsOk returns a tuple with the Remediations field value
// and a boolean to check if the value has been set.
func (o *Tag) GetRemediationsOk() ([]TagRemediation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remediations, true
}

// SetRemediations sets field value
func (o *Tag) SetRemediations(v []TagRemediation) {
	o.Remediations = v
}

// GetExternalUrl returns the ExternalUrl field value
func (o *Tag) GetExternalUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalUrl
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value
// and a boolean to check if the value has been set.
func (o *Tag) GetExternalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalUrl, true
}

// SetExternalUrl sets field value
func (o *Tag) SetExternalUrl(v string) {
	o.ExternalUrl = v
}

// GetCategory returns the Category field value
func (o *Tag) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Tag) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Tag) SetCategory(v string) {
	o.Category = v
}

// GetLabels returns the Labels field value
func (o *Tag) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Tag) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *Tag) SetLabels(v []string) {
	o.Labels = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Tag) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Tag) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Tag) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Tag) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Tag) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Tag) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Tag) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tag) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// SetUpdatedBy sets field value
func (o *Tag) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Tag) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tag) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *Tag) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["display_name"] = o.DisplayName
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description
	toSerialize["risk_statement"] = o.RiskStatement
	toSerialize["remediations"] = o.Remediations
	toSerialize["external_url"] = o.ExternalUrl
	toSerialize["category"] = o.Category
	toSerialize["labels"] = o.Labels
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_by"] = o.UpdatedBy.Get()
	toSerialize["updated_at"] = o.UpdatedAt.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Tag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"display_name",
		"type",
		"description",
		"risk_statement",
		"remediations",
		"external_url",
		"category",
		"labels",
		"created_by",
		"created_at",
		"updated_by",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTag := _Tag{}

	err = json.Unmarshal(data, &varTag)

	if err != nil {
		return err
	}

	*o = Tag(varTag)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "risk_statement")
		delete(additionalProperties, "remediations")
		delete(additionalProperties, "external_url")
		delete(additionalProperties, "category")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_by")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
