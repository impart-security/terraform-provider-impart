/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// LabelColor The color of the label.
type LabelColor string

// List of label_color
const (
	GRAY   LabelColor = "gray"
	RED    LabelColor = "red"
	ORANGE LabelColor = "orange"
	YELLOW LabelColor = "yellow"
	GREEN  LabelColor = "green"
	TEAL   LabelColor = "teal"
	CYAN   LabelColor = "cyan"
	BLUE   LabelColor = "blue"
	PURPLE LabelColor = "purple"
	PINK   LabelColor = "pink"
)

// All allowed values of LabelColor enum
var AllowedLabelColorEnumValues = []LabelColor{
	"gray",
	"red",
	"orange",
	"yellow",
	"green",
	"teal",
	"cyan",
	"blue",
	"purple",
	"pink",
}

func (v *LabelColor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelColor(value)
	for _, existing := range AllowedLabelColorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelColor", value)
}

// NewLabelColorFromValue returns a pointer to a valid LabelColor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelColorFromValue(v string) (*LabelColor, error) {
	ev := LabelColor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelColor: valid values are %v", v, AllowedLabelColorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelColor) IsValid() bool {
	for _, existing := range AllowedLabelColorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to label_color value
func (v LabelColor) Ptr() *LabelColor {
	return &v
}

type NullableLabelColor struct {
	value *LabelColor
	isSet bool
}

func (v NullableLabelColor) Get() *LabelColor {
	return v.value
}

func (v *NullableLabelColor) Set(val *LabelColor) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelColor) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelColor(val *LabelColor) *NullableLabelColor {
	return &NullableLabelColor{value: val, isSet: true}
}

func (v NullableLabelColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
