/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the CoreRulePostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreRulePostBody{}

// CoreRulePostBody struct for CoreRulePostBody
type CoreRulePostBody struct {
	Disabled bool `json:"disabled"`
	// The applied labels.
	Labels               []string       `json:"labels,omitempty"`
	Config               CoreRuleConfig `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _CoreRulePostBody CoreRulePostBody

// NewCoreRulePostBody instantiates a new CoreRulePostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreRulePostBody(disabled bool, config CoreRuleConfig) *CoreRulePostBody {
	this := CoreRulePostBody{}
	this.Disabled = disabled
	this.Config = config
	return &this
}

// NewCoreRulePostBodyWithDefaults instantiates a new CoreRulePostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreRulePostBodyWithDefaults() *CoreRulePostBody {
	this := CoreRulePostBody{}
	var disabled bool = true
	this.Disabled = disabled
	return &this
}

// GetDisabled returns the Disabled field value
func (o *CoreRulePostBody) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *CoreRulePostBody) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *CoreRulePostBody) SetDisabled(v bool) {
	o.Disabled = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CoreRulePostBody) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreRulePostBody) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CoreRulePostBody) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CoreRulePostBody) SetLabels(v []string) {
	o.Labels = v
}

// GetConfig returns the Config field value
func (o *CoreRulePostBody) GetConfig() CoreRuleConfig {
	if o == nil {
		var ret CoreRuleConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *CoreRulePostBody) GetConfigOk() (*CoreRuleConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *CoreRulePostBody) SetConfig(v CoreRuleConfig) {
	o.Config = v
}

func (o CoreRulePostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreRulePostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreRulePostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disabled",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoreRulePostBody := _CoreRulePostBody{}

	err = json.Unmarshal(data, &varCoreRulePostBody)

	if err != nil {
		return err
	}

	*o = CoreRulePostBody(varCoreRulePostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreRulePostBody struct {
	value *CoreRulePostBody
	isSet bool
}

func (v NullableCoreRulePostBody) Get() *CoreRulePostBody {
	return v.value
}

func (v *NullableCoreRulePostBody) Set(val *CoreRulePostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreRulePostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreRulePostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreRulePostBody(val *CoreRulePostBody) *NullableCoreRulePostBody {
	return &NullableCoreRulePostBody{value: val, isSet: true}
}

func (v NullableCoreRulePostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreRulePostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
