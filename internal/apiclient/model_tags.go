/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the Tags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tags{}

// Tags struct for Tags
type Tags struct {
	// A list of tags.
	Items                []Tag           `json:"items"`
	Meta                 *CollectionMeta `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Tags Tags

// NewTags instantiates a new Tags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTags(items []Tag) *Tags {
	this := Tags{}
	this.Items = items
	return &this
}

// NewTagsWithDefaults instantiates a new Tags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsWithDefaults() *Tags {
	this := Tags{}
	return &this
}

// GetItems returns the Items field value
func (o *Tags) GetItems() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Tags) GetItemsOk() ([]Tag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Tags) SetItems(v []Tag) {
	o.Items = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Tags) GetMeta() CollectionMeta {
	if o == nil || IsNil(o.Meta) {
		var ret CollectionMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tags) GetMetaOk() (*CollectionMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Tags) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given CollectionMeta and assigns it to the Meta field.
func (o *Tags) SetMeta(v CollectionMeta) {
	o.Meta = &v
}

func (o Tags) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Tags) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTags := _Tags{}

	err = json.Unmarshal(data, &varTags)

	if err != nil {
		return err
	}

	*o = Tags(varTags)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTags struct {
	value *Tags
	isSet bool
}

func (v NullableTags) Get() *Tags {
	return v.value
}

func (v *NullableTags) Set(val *Tags) {
	v.value = val
	v.isSet = true
}

func (v NullableTags) IsSet() bool {
	return v.isSet
}

func (v *NullableTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTags(val *Tags) *NullableTags {
	return &NullableTags{value: val, isSet: true}
}

func (v NullableTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
