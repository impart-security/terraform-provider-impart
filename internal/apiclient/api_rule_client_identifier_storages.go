/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type RuleClientIdentifierStoragesAPI interface {

	/*
		CreateRuleClientIdentifierStorage Create a new client identifier storage

		Creates a new rule client identifier storage for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@return ApiCreateRuleClientIdentifierStorageRequest
	*/
	CreateRuleClientIdentifierStorage(ctx context.Context, orgId string) ApiCreateRuleClientIdentifierStorageRequest

	// CreateRuleClientIdentifierStorageExecute executes the request
	//  @return RuleClientIdentifierStorage
	CreateRuleClientIdentifierStorageExecute(r ApiCreateRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error)

	/*
		DeleteRuleClientIdentifierStorage Delete a rule client identifier storage

		Deletes a rule client identifier storage for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@param ruleClientIdentifierStorageId Rule client identifier storage ID
		@return ApiDeleteRuleClientIdentifierStorageRequest
	*/
	DeleteRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiDeleteRuleClientIdentifierStorageRequest

	// DeleteRuleClientIdentifierStorageExecute executes the request
	DeleteRuleClientIdentifierStorageExecute(r ApiDeleteRuleClientIdentifierStorageRequest) (*http.Response, error)

	/*
		GetRuleClientIdentifierStorage Get a rule client identifier storage

		Gets a rule client identifier storage for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@param ruleClientIdentifierStorageId Rule client identifier storage ID
		@return ApiGetRuleClientIdentifierStorageRequest
	*/
	GetRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiGetRuleClientIdentifierStorageRequest

	// GetRuleClientIdentifierStorageExecute executes the request
	//  @return RuleClientIdentifierStorage
	GetRuleClientIdentifierStorageExecute(r ApiGetRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error)

	/*
		GetRuleClientIdentifierStorages Get rule client identifier storages

		Gets a list of rule client identifier storages for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@return ApiGetRuleClientIdentifierStoragesRequest
	*/
	GetRuleClientIdentifierStorages(ctx context.Context, orgId string) ApiGetRuleClientIdentifierStoragesRequest

	// GetRuleClientIdentifierStoragesExecute executes the request
	//  @return RuleClientIdentifierStorages
	GetRuleClientIdentifierStoragesExecute(r ApiGetRuleClientIdentifierStoragesRequest) (*RuleClientIdentifierStorages, *http.Response, error)

	/*
		UpdateRuleClientIdentifierStorage Update a rule client identifier storage

		Updates a rule client identifier storage for an organization.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orgId Organization ID
		@param ruleClientIdentifierStorageId Rule client identifier storage ID
		@return ApiUpdateRuleClientIdentifierStorageRequest
	*/
	UpdateRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiUpdateRuleClientIdentifierStorageRequest

	// UpdateRuleClientIdentifierStorageExecute executes the request
	//  @return RuleClientIdentifierStorage
	UpdateRuleClientIdentifierStorageExecute(r ApiUpdateRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error)
}

// RuleClientIdentifierStoragesAPIService RuleClientIdentifierStoragesAPI service
type RuleClientIdentifierStoragesAPIService service

type ApiCreateRuleClientIdentifierStorageRequest struct {
	ctx                                 context.Context
	ApiService                          RuleClientIdentifierStoragesAPI
	orgId                               string
	ruleClientIdentifierStoragePostBody *RuleClientIdentifierStoragePostBody
}

// Request body for creating a rule client identifier storage.
func (r ApiCreateRuleClientIdentifierStorageRequest) RuleClientIdentifierStoragePostBody(ruleClientIdentifierStoragePostBody RuleClientIdentifierStoragePostBody) ApiCreateRuleClientIdentifierStorageRequest {
	r.ruleClientIdentifierStoragePostBody = &ruleClientIdentifierStoragePostBody
	return r
}

func (r ApiCreateRuleClientIdentifierStorageRequest) Execute() (*RuleClientIdentifierStorage, *http.Response, error) {
	return r.ApiService.CreateRuleClientIdentifierStorageExecute(r)
}

/*
CreateRuleClientIdentifierStorage Create a new client identifier storage

Creates a new rule client identifier storage for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@return ApiCreateRuleClientIdentifierStorageRequest
*/
func (a *RuleClientIdentifierStoragesAPIService) CreateRuleClientIdentifierStorage(ctx context.Context, orgId string) ApiCreateRuleClientIdentifierStorageRequest {
	return ApiCreateRuleClientIdentifierStorageRequest{
		ApiService: a,
		ctx:        ctx,
		orgId:      orgId,
	}
}

// Execute executes the request
//
//	@return RuleClientIdentifierStorage
func (a *RuleClientIdentifierStoragesAPIService) CreateRuleClientIdentifierStorageExecute(r ApiCreateRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleClientIdentifierStorage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleClientIdentifierStoragesAPIService.CreateRuleClientIdentifierStorage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rule_client_identifier_storages"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return localVarReturnValue, nil, reportError("orgId must have less than 36 elements")
	}
	if r.ruleClientIdentifierStoragePostBody == nil {
		return localVarReturnValue, nil, reportError("ruleClientIdentifierStoragePostBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ruleClientIdentifierStoragePostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CompilationDiagnostics
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRuleClientIdentifierStorageRequest struct {
	ctx                           context.Context
	ApiService                    RuleClientIdentifierStoragesAPI
	orgId                         string
	ruleClientIdentifierStorageId string
	ifMatch                       *string
}

// If Match for ETag lock checks.
func (r ApiDeleteRuleClientIdentifierStorageRequest) IfMatch(ifMatch string) ApiDeleteRuleClientIdentifierStorageRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeleteRuleClientIdentifierStorageRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRuleClientIdentifierStorageExecute(r)
}

/*
DeleteRuleClientIdentifierStorage Delete a rule client identifier storage

Deletes a rule client identifier storage for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@param ruleClientIdentifierStorageId Rule client identifier storage ID
	@return ApiDeleteRuleClientIdentifierStorageRequest
*/
func (a *RuleClientIdentifierStoragesAPIService) DeleteRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiDeleteRuleClientIdentifierStorageRequest {
	return ApiDeleteRuleClientIdentifierStorageRequest{
		ApiService:                    a,
		ctx:                           ctx,
		orgId:                         orgId,
		ruleClientIdentifierStorageId: ruleClientIdentifierStorageId,
	}
}

// Execute executes the request
func (a *RuleClientIdentifierStoragesAPIService) DeleteRuleClientIdentifierStorageExecute(r ApiDeleteRuleClientIdentifierStorageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleClientIdentifierStoragesAPIService.DeleteRuleClientIdentifierStorage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rule_client_identifier_storages/{rule_client_identifier_storage_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rule_client_identifier_storage_id"+"}", url.PathEscape(parameterValueToString(r.ruleClientIdentifierStorageId, "ruleClientIdentifierStorageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return nil, reportError("orgId must have less than 36 elements")
	}
	if strlen(r.ruleClientIdentifierStorageId) > 36 {
		return nil, reportError("ruleClientIdentifierStorageId must have less than 36 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRuleClientIdentifierStorageRequest struct {
	ctx                           context.Context
	ApiService                    RuleClientIdentifierStoragesAPI
	orgId                         string
	ruleClientIdentifierStorageId string
}

func (r ApiGetRuleClientIdentifierStorageRequest) Execute() (*RuleClientIdentifierStorage, *http.Response, error) {
	return r.ApiService.GetRuleClientIdentifierStorageExecute(r)
}

/*
GetRuleClientIdentifierStorage Get a rule client identifier storage

Gets a rule client identifier storage for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@param ruleClientIdentifierStorageId Rule client identifier storage ID
	@return ApiGetRuleClientIdentifierStorageRequest
*/
func (a *RuleClientIdentifierStoragesAPIService) GetRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiGetRuleClientIdentifierStorageRequest {
	return ApiGetRuleClientIdentifierStorageRequest{
		ApiService:                    a,
		ctx:                           ctx,
		orgId:                         orgId,
		ruleClientIdentifierStorageId: ruleClientIdentifierStorageId,
	}
}

// Execute executes the request
//
//	@return RuleClientIdentifierStorage
func (a *RuleClientIdentifierStoragesAPIService) GetRuleClientIdentifierStorageExecute(r ApiGetRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleClientIdentifierStorage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleClientIdentifierStoragesAPIService.GetRuleClientIdentifierStorage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rule_client_identifier_storages/{rule_client_identifier_storage_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rule_client_identifier_storage_id"+"}", url.PathEscape(parameterValueToString(r.ruleClientIdentifierStorageId, "ruleClientIdentifierStorageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return localVarReturnValue, nil, reportError("orgId must have less than 36 elements")
	}
	if strlen(r.ruleClientIdentifierStorageId) > 36 {
		return localVarReturnValue, nil, reportError("ruleClientIdentifierStorageId must have less than 36 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRuleClientIdentifierStoragesRequest struct {
	ctx        context.Context
	ApiService RuleClientIdentifierStoragesAPI
	orgId      string
	page       *int32
	maxResults *int32
	search     *string
}

// The page of results to return
func (r ApiGetRuleClientIdentifierStoragesRequest) Page(page int32) ApiGetRuleClientIdentifierStoragesRequest {
	r.page = &page
	return r
}

// The max number of results to return
func (r ApiGetRuleClientIdentifierStoragesRequest) MaxResults(maxResults int32) ApiGetRuleClientIdentifierStoragesRequest {
	r.maxResults = &maxResults
	return r
}

// Search string
func (r ApiGetRuleClientIdentifierStoragesRequest) Search(search string) ApiGetRuleClientIdentifierStoragesRequest {
	r.search = &search
	return r
}

func (r ApiGetRuleClientIdentifierStoragesRequest) Execute() (*RuleClientIdentifierStorages, *http.Response, error) {
	return r.ApiService.GetRuleClientIdentifierStoragesExecute(r)
}

/*
GetRuleClientIdentifierStorages Get rule client identifier storages

Gets a list of rule client identifier storages for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@return ApiGetRuleClientIdentifierStoragesRequest
*/
func (a *RuleClientIdentifierStoragesAPIService) GetRuleClientIdentifierStorages(ctx context.Context, orgId string) ApiGetRuleClientIdentifierStoragesRequest {
	return ApiGetRuleClientIdentifierStoragesRequest{
		ApiService: a,
		ctx:        ctx,
		orgId:      orgId,
	}
}

// Execute executes the request
//
//	@return RuleClientIdentifierStorages
func (a *RuleClientIdentifierStoragesAPIService) GetRuleClientIdentifierStoragesExecute(r ApiGetRuleClientIdentifierStoragesRequest) (*RuleClientIdentifierStorages, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleClientIdentifierStorages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleClientIdentifierStoragesAPIService.GetRuleClientIdentifierStorages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rule_client_identifier_storages"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return localVarReturnValue, nil, reportError("orgId must have less than 36 elements")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_results", r.maxResults, "", "")
	} else {
		var defaultValue int32 = 100
		r.maxResults = &defaultValue
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRuleClientIdentifierStorageRequest struct {
	ctx                                 context.Context
	ApiService                          RuleClientIdentifierStoragesAPI
	orgId                               string
	ruleClientIdentifierStorageId       string
	ruleClientIdentifierStoragePostBody *RuleClientIdentifierStoragePostBody
	ifMatch                             *string
}

// Request body for creating a rule client identifier storage.
func (r ApiUpdateRuleClientIdentifierStorageRequest) RuleClientIdentifierStoragePostBody(ruleClientIdentifierStoragePostBody RuleClientIdentifierStoragePostBody) ApiUpdateRuleClientIdentifierStorageRequest {
	r.ruleClientIdentifierStoragePostBody = &ruleClientIdentifierStoragePostBody
	return r
}

// If Match for ETag lock checks.
func (r ApiUpdateRuleClientIdentifierStorageRequest) IfMatch(ifMatch string) ApiUpdateRuleClientIdentifierStorageRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUpdateRuleClientIdentifierStorageRequest) Execute() (*RuleClientIdentifierStorage, *http.Response, error) {
	return r.ApiService.UpdateRuleClientIdentifierStorageExecute(r)
}

/*
UpdateRuleClientIdentifierStorage Update a rule client identifier storage

Updates a rule client identifier storage for an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId Organization ID
	@param ruleClientIdentifierStorageId Rule client identifier storage ID
	@return ApiUpdateRuleClientIdentifierStorageRequest
*/
func (a *RuleClientIdentifierStoragesAPIService) UpdateRuleClientIdentifierStorage(ctx context.Context, orgId string, ruleClientIdentifierStorageId string) ApiUpdateRuleClientIdentifierStorageRequest {
	return ApiUpdateRuleClientIdentifierStorageRequest{
		ApiService:                    a,
		ctx:                           ctx,
		orgId:                         orgId,
		ruleClientIdentifierStorageId: ruleClientIdentifierStorageId,
	}
}

// Execute executes the request
//
//	@return RuleClientIdentifierStorage
func (a *RuleClientIdentifierStoragesAPIService) UpdateRuleClientIdentifierStorageExecute(r ApiUpdateRuleClientIdentifierStorageRequest) (*RuleClientIdentifierStorage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleClientIdentifierStorage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleClientIdentifierStoragesAPIService.UpdateRuleClientIdentifierStorage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org_id}/rule_client_identifier_storages/{rule_client_identifier_storage_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rule_client_identifier_storage_id"+"}", url.PathEscape(parameterValueToString(r.ruleClientIdentifierStorageId, "ruleClientIdentifierStorageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgId) > 36 {
		return localVarReturnValue, nil, reportError("orgId must have less than 36 elements")
	}
	if strlen(r.ruleClientIdentifierStorageId) > 36 {
		return localVarReturnValue, nil, reportError("ruleClientIdentifierStorageId must have less than 36 elements")
	}
	if r.ruleClientIdentifierStoragePostBody == nil {
		return localVarReturnValue, nil, reportError("ruleClientIdentifierStoragePostBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/security.impart.api.v0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "", "")
	}
	// body params
	localVarPostBody = r.ruleClientIdentifierStoragePostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CompilationDiagnostics
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
