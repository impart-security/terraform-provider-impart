/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the RuleRecipeScript type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleRecipeScript{}

// RuleRecipeScript struct for RuleRecipeScript
type RuleRecipeScript struct {
	// The rules script source code, which is a base64-encoded string.
	Src                  string `json:"src"`
	AdditionalProperties map[string]interface{}
}

type _RuleRecipeScript RuleRecipeScript

// NewRuleRecipeScript instantiates a new RuleRecipeScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleRecipeScript(src string) *RuleRecipeScript {
	this := RuleRecipeScript{}
	this.Src = src
	return &this
}

// NewRuleRecipeScriptWithDefaults instantiates a new RuleRecipeScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleRecipeScriptWithDefaults() *RuleRecipeScript {
	this := RuleRecipeScript{}
	return &this
}

// GetSrc returns the Src field value
func (o *RuleRecipeScript) GetSrc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Src
}

// GetSrcOk returns a tuple with the Src field value
// and a boolean to check if the value has been set.
func (o *RuleRecipeScript) GetSrcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Src, true
}

// SetSrc sets field value
func (o *RuleRecipeScript) SetSrc(v string) {
	o.Src = v
}

func (o RuleRecipeScript) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleRecipeScript) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["src"] = o.Src

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleRecipeScript) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"src",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleRecipeScript := _RuleRecipeScript{}

	err = json.Unmarshal(data, &varRuleRecipeScript)

	if err != nil {
		return err
	}

	*o = RuleRecipeScript(varRuleRecipeScript)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "src")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleRecipeScript struct {
	value *RuleRecipeScript
	isSet bool
}

func (v NullableRuleRecipeScript) Get() *RuleRecipeScript {
	return v.value
}

func (v *NullableRuleRecipeScript) Set(val *RuleRecipeScript) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleRecipeScript) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleRecipeScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleRecipeScript(val *RuleRecipeScript) *NullableRuleRecipeScript {
	return &NullableRuleRecipeScript{value: val, isSet: true}
}

func (v NullableRuleRecipeScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleRecipeScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
