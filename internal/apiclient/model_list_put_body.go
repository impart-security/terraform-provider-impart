/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPutBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPutBody{}

// ListPutBody struct for ListPutBody
type ListPutBody struct {
	// The new name of the list.
	Name string `json:"name"`
	// The description of the list.
	Description *string      `json:"description,omitempty"`
	Subkind     *ListSubkind `json:"subkind,omitempty"`
	// The applied labels.
	Labels               []string `json:"labels,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListPutBody ListPutBody

// NewListPutBody instantiates a new ListPutBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPutBody(name string) *ListPutBody {
	this := ListPutBody{}
	this.Name = name
	return &this
}

// NewListPutBodyWithDefaults instantiates a new ListPutBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPutBodyWithDefaults() *ListPutBody {
	this := ListPutBody{}
	return &this
}

// GetName returns the Name field value
func (o *ListPutBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListPutBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListPutBody) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListPutBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPutBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ListPutBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListPutBody) SetDescription(v string) {
	o.Description = &v
}

// GetSubkind returns the Subkind field value if set, zero value otherwise.
func (o *ListPutBody) GetSubkind() ListSubkind {
	if o == nil || IsNil(o.Subkind) {
		var ret ListSubkind
		return ret
	}
	return *o.Subkind
}

// GetSubkindOk returns a tuple with the Subkind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPutBody) GetSubkindOk() (*ListSubkind, bool) {
	if o == nil || IsNil(o.Subkind) {
		return nil, false
	}
	return o.Subkind, true
}

// HasSubkind returns a boolean if a field has been set.
func (o *ListPutBody) HasSubkind() bool {
	if o != nil && !IsNil(o.Subkind) {
		return true
	}

	return false
}

// SetSubkind gets a reference to the given ListSubkind and assigns it to the Subkind field.
func (o *ListPutBody) SetSubkind(v ListSubkind) {
	o.Subkind = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ListPutBody) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPutBody) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ListPutBody) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ListPutBody) SetLabels(v []string) {
	o.Labels = v
}

func (o ListPutBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPutBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Subkind) {
		toSerialize["subkind"] = o.Subkind
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPutBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPutBody := _ListPutBody{}

	err = json.Unmarshal(data, &varListPutBody)

	if err != nil {
		return err
	}

	*o = ListPutBody(varListPutBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "subkind")
		delete(additionalProperties, "labels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPutBody struct {
	value *ListPutBody
	isSet bool
}

func (v NullableListPutBody) Get() *ListPutBody {
	return v.value
}

func (v *NullableListPutBody) Set(val *ListPutBody) {
	v.value = val
	v.isSet = true
}

func (v NullableListPutBody) IsSet() bool {
	return v.isSet
}

func (v *NullableListPutBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPutBody(val *ListPutBody) *NullableListPutBody {
	return &NullableListPutBody{value: val, isSet: true}
}

func (v NullableListPutBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPutBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
