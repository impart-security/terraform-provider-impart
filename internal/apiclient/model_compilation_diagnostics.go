/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the CompilationDiagnostics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompilationDiagnostics{}

// CompilationDiagnostics struct for CompilationDiagnostics
type CompilationDiagnostics struct {
	Message              string                  `json:"message"`
	Diagnostics          []CompilationDiagnostic `json:"diagnostics,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompilationDiagnostics CompilationDiagnostics

// NewCompilationDiagnostics instantiates a new CompilationDiagnostics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompilationDiagnostics(message string) *CompilationDiagnostics {
	this := CompilationDiagnostics{}
	this.Message = message
	return &this
}

// NewCompilationDiagnosticsWithDefaults instantiates a new CompilationDiagnostics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompilationDiagnosticsWithDefaults() *CompilationDiagnostics {
	this := CompilationDiagnostics{}
	return &this
}

// GetMessage returns the Message field value
func (o *CompilationDiagnostics) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostics) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CompilationDiagnostics) SetMessage(v string) {
	o.Message = v
}

// GetDiagnostics returns the Diagnostics field value if set, zero value otherwise.
func (o *CompilationDiagnostics) GetDiagnostics() []CompilationDiagnostic {
	if o == nil || IsNil(o.Diagnostics) {
		var ret []CompilationDiagnostic
		return ret
	}
	return o.Diagnostics
}

// GetDiagnosticsOk returns a tuple with the Diagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostics) GetDiagnosticsOk() ([]CompilationDiagnostic, bool) {
	if o == nil || IsNil(o.Diagnostics) {
		return nil, false
	}
	return o.Diagnostics, true
}

// HasDiagnostics returns a boolean if a field has been set.
func (o *CompilationDiagnostics) HasDiagnostics() bool {
	if o != nil && !IsNil(o.Diagnostics) {
		return true
	}

	return false
}

// SetDiagnostics gets a reference to the given []CompilationDiagnostic and assigns it to the Diagnostics field.
func (o *CompilationDiagnostics) SetDiagnostics(v []CompilationDiagnostic) {
	o.Diagnostics = v
}

func (o CompilationDiagnostics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompilationDiagnostics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	if !IsNil(o.Diagnostics) {
		toSerialize["diagnostics"] = o.Diagnostics
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompilationDiagnostics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompilationDiagnostics := _CompilationDiagnostics{}

	err = json.Unmarshal(data, &varCompilationDiagnostics)

	if err != nil {
		return err
	}

	*o = CompilationDiagnostics(varCompilationDiagnostics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "diagnostics")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompilationDiagnostics struct {
	value *CompilationDiagnostics
	isSet bool
}

func (v NullableCompilationDiagnostics) Get() *CompilationDiagnostics {
	return v.value
}

func (v *NullableCompilationDiagnostics) Set(val *CompilationDiagnostics) {
	v.value = val
	v.isSet = true
}

func (v NullableCompilationDiagnostics) IsSet() bool {
	return v.isSet
}

func (v *NullableCompilationDiagnostics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompilationDiagnostics(val *CompilationDiagnostics) *NullableCompilationDiagnostics {
	return &NullableCompilationDiagnostics{value: val, isSet: true}
}

func (v NullableCompilationDiagnostics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompilationDiagnostics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
