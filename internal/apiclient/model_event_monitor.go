/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EventMonitor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMonitor{}

// EventMonitor struct for EventMonitor
type EventMonitor struct {
	// The ID for an event monitor.
	Id string `json:"id"`
	// The name of the event monitor and what it represents.
	Name string `json:"name"`
	// A human readable string describing what this monitor is for.
	Description string `json:"description"`
	// Array of condition objects that (if all are true) will trigger the monitor.
	Conditions []EventMonitorCondition `json:"conditions"`
	// ID of the member who created the monitor.
	CreatedBy string `json:"created_by"`
	// The date the event monitor was created.
	CreatedAt time.Time `json:"created_at"`
	// ID of the member who last updated the monitor.
	UpdatedBy NullableString `json:"updated_by"`
	// The date the event monitor was last updated.
	UpdatedAt NullableTime `json:"updated_at"`
	// The ids of the notification templates that the monitor is associated with.
	NotificationTemplateIds []string `json:"notification_template_ids"`
	AdditionalProperties    map[string]interface{}
}

type _EventMonitor EventMonitor

// NewEventMonitor instantiates a new EventMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMonitor(id string, name string, description string, conditions []EventMonitorCondition, createdBy string, createdAt time.Time, updatedBy NullableString, updatedAt NullableTime, notificationTemplateIds []string) *EventMonitor {
	this := EventMonitor{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Conditions = conditions
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	this.UpdatedBy = updatedBy
	this.UpdatedAt = updatedAt
	this.NotificationTemplateIds = notificationTemplateIds
	return &this
}

// NewEventMonitorWithDefaults instantiates a new EventMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMonitorWithDefaults() *EventMonitor {
	this := EventMonitor{}
	return &this
}

// GetId returns the Id field value
func (o *EventMonitor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventMonitor) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EventMonitor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventMonitor) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *EventMonitor) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EventMonitor) SetDescription(v string) {
	o.Description = v
}

// GetConditions returns the Conditions field value
func (o *EventMonitor) GetConditions() []EventMonitorCondition {
	if o == nil {
		var ret []EventMonitorCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetConditionsOk() ([]EventMonitorCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *EventMonitor) SetConditions(v []EventMonitorCondition) {
	o.Conditions = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *EventMonitor) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *EventMonitor) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EventMonitor) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EventMonitor) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventMonitor) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMonitor) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// SetUpdatedBy sets field value
func (o *EventMonitor) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *EventMonitor) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventMonitor) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *EventMonitor) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetNotificationTemplateIds returns the NotificationTemplateIds field value
func (o *EventMonitor) GetNotificationTemplateIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NotificationTemplateIds
}

// GetNotificationTemplateIdsOk returns a tuple with the NotificationTemplateIds field value
// and a boolean to check if the value has been set.
func (o *EventMonitor) GetNotificationTemplateIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationTemplateIds, true
}

// SetNotificationTemplateIds sets field value
func (o *EventMonitor) SetNotificationTemplateIds(v []string) {
	o.NotificationTemplateIds = v
}

func (o EventMonitor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMonitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["conditions"] = o.Conditions
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_by"] = o.UpdatedBy.Get()
	toSerialize["updated_at"] = o.UpdatedAt.Get()
	toSerialize["notification_template_ids"] = o.NotificationTemplateIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventMonitor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"conditions",
		"created_by",
		"created_at",
		"updated_by",
		"updated_at",
		"notification_template_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventMonitor := _EventMonitor{}

	err = json.Unmarshal(data, &varEventMonitor)

	if err != nil {
		return err
	}

	*o = EventMonitor(varEventMonitor)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_by")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "notification_template_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventMonitor struct {
	value *EventMonitor
	isSet bool
}

func (v NullableEventMonitor) Get() *EventMonitor {
	return v.value
}

func (v *NullableEventMonitor) Set(val *EventMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMonitor(val *EventMonitor) *NullableEventMonitor {
	return &NullableEventMonitor{value: val, isSet: true}
}

func (v NullableEventMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
