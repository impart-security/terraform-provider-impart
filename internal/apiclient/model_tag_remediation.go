/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the TagRemediation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagRemediation{}

// TagRemediation struct for TagRemediation
type TagRemediation struct {
	// A description of the remediation.
	Description string `json:"description"`
	// Possible remediation action for the tag.
	Action               string `json:"action"`
	AdditionalProperties map[string]interface{}
}

type _TagRemediation TagRemediation

// NewTagRemediation instantiates a new TagRemediation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagRemediation(description string, action string) *TagRemediation {
	this := TagRemediation{}
	this.Description = description
	this.Action = action
	return &this
}

// NewTagRemediationWithDefaults instantiates a new TagRemediation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagRemediationWithDefaults() *TagRemediation {
	this := TagRemediation{}
	var action string = "undefined"
	this.Action = action
	return &this
}

// GetDescription returns the Description field value
func (o *TagRemediation) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TagRemediation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TagRemediation) SetDescription(v string) {
	o.Description = v
}

// GetAction returns the Action field value
func (o *TagRemediation) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TagRemediation) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *TagRemediation) SetAction(v string) {
	o.Action = v
}

func (o TagRemediation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagRemediation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["action"] = o.Action

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TagRemediation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagRemediation := _TagRemediation{}

	err = json.Unmarshal(data, &varTagRemediation)

	if err != nil {
		return err
	}

	*o = TagRemediation(varTagRemediation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTagRemediation struct {
	value *TagRemediation
	isSet bool
}

func (v NullableTagRemediation) Get() *TagRemediation {
	return v.value
}

func (v *NullableTagRemediation) Set(val *TagRemediation) {
	v.value = val
	v.isSet = true
}

func (v NullableTagRemediation) IsSet() bool {
	return v.isSet
}

func (v *NullableTagRemediation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagRemediation(val *TagRemediation) *NullableTagRemediation {
	return &NullableTagRemediation{value: val, isSet: true}
}

func (v NullableTagRemediation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagRemediation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
