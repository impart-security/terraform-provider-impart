/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the RuleRecipePostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleRecipePostBody{}

// RuleRecipePostBody struct for RuleRecipePostBody
type RuleRecipePostBody struct {
	Name           string             `json:"name"`
	Description    *string            `json:"description,omitempty"`
	Disabled       bool               `json:"disabled"`
	BlockingEffect BlockingEffectType `json:"blocking_effect"`
	// The applied labels.
	Labels               []string             `json:"labels,omitempty"`
	Components           RuleRecipeComponents `json:"components"`
	AdditionalProperties map[string]interface{}
}

type _RuleRecipePostBody RuleRecipePostBody

// NewRuleRecipePostBody instantiates a new RuleRecipePostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleRecipePostBody(name string, disabled bool, blockingEffect BlockingEffectType, components RuleRecipeComponents) *RuleRecipePostBody {
	this := RuleRecipePostBody{}
	this.Name = name
	this.Disabled = disabled
	this.BlockingEffect = blockingEffect
	this.Components = components
	return &this
}

// NewRuleRecipePostBodyWithDefaults instantiates a new RuleRecipePostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleRecipePostBodyWithDefaults() *RuleRecipePostBody {
	this := RuleRecipePostBody{}
	var blockingEffect BlockingEffectType = BLOCKINGEFFECTTYPE_BLOCK
	this.BlockingEffect = blockingEffect
	return &this
}

// GetName returns the Name field value
func (o *RuleRecipePostBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RuleRecipePostBody) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RuleRecipePostBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RuleRecipePostBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RuleRecipePostBody) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value
func (o *RuleRecipePostBody) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *RuleRecipePostBody) SetDisabled(v bool) {
	o.Disabled = v
}

// GetBlockingEffect returns the BlockingEffect field value
func (o *RuleRecipePostBody) GetBlockingEffect() BlockingEffectType {
	if o == nil {
		var ret BlockingEffectType
		return ret
	}

	return o.BlockingEffect
}

// GetBlockingEffectOk returns a tuple with the BlockingEffect field value
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetBlockingEffectOk() (*BlockingEffectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockingEffect, true
}

// SetBlockingEffect sets field value
func (o *RuleRecipePostBody) SetBlockingEffect(v BlockingEffectType) {
	o.BlockingEffect = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RuleRecipePostBody) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RuleRecipePostBody) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *RuleRecipePostBody) SetLabels(v []string) {
	o.Labels = v
}

// GetComponents returns the Components field value
func (o *RuleRecipePostBody) GetComponents() RuleRecipeComponents {
	if o == nil {
		var ret RuleRecipeComponents
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *RuleRecipePostBody) GetComponentsOk() (*RuleRecipeComponents, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Components, true
}

// SetComponents sets field value
func (o *RuleRecipePostBody) SetComponents(v RuleRecipeComponents) {
	o.Components = v
}

func (o RuleRecipePostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleRecipePostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["disabled"] = o.Disabled
	toSerialize["blocking_effect"] = o.BlockingEffect
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["components"] = o.Components

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleRecipePostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"disabled",
		"blocking_effect",
		"components",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleRecipePostBody := _RuleRecipePostBody{}

	err = json.Unmarshal(data, &varRuleRecipePostBody)

	if err != nil {
		return err
	}

	*o = RuleRecipePostBody(varRuleRecipePostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "blocking_effect")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "components")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleRecipePostBody struct {
	value *RuleRecipePostBody
	isSet bool
}

func (v NullableRuleRecipePostBody) Get() *RuleRecipePostBody {
	return v.value
}

func (v *NullableRuleRecipePostBody) Set(val *RuleRecipePostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleRecipePostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleRecipePostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleRecipePostBody(val *RuleRecipePostBody) *NullableRuleRecipePostBody {
	return &NullableRuleRecipePostBody{value: val, isSet: true}
}

func (v NullableRuleRecipePostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleRecipePostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
