/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the SpecLearningConfigInspector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecLearningConfigInspector{}

// SpecLearningConfigInspector struct for SpecLearningConfigInspector
type SpecLearningConfigInspector struct {
	// Ignore request headers during spec learning.
	IgnoreRequestHeaders bool `json:"ignore_request_headers"`
	// Ignore response headers during spec learning.
	IgnoreResponseHeaders bool `json:"ignore_response_headers"`
	// Ignore query parameters during spec learning.
	IgnoreQueryParams bool `json:"ignore_query_params"`
	// Ignore request body during spec learning.
	IgnoreRequestBody bool `json:"ignore_request_body"`
	// Ignore response body during spec learning.
	IgnoreResponseBody   bool `json:"ignore_response_body"`
	AdditionalProperties map[string]interface{}
}

type _SpecLearningConfigInspector SpecLearningConfigInspector

// NewSpecLearningConfigInspector instantiates a new SpecLearningConfigInspector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecLearningConfigInspector(ignoreRequestHeaders bool, ignoreResponseHeaders bool, ignoreQueryParams bool, ignoreRequestBody bool, ignoreResponseBody bool) *SpecLearningConfigInspector {
	this := SpecLearningConfigInspector{}
	this.IgnoreRequestHeaders = ignoreRequestHeaders
	this.IgnoreResponseHeaders = ignoreResponseHeaders
	this.IgnoreQueryParams = ignoreQueryParams
	this.IgnoreRequestBody = ignoreRequestBody
	this.IgnoreResponseBody = ignoreResponseBody
	return &this
}

// NewSpecLearningConfigInspectorWithDefaults instantiates a new SpecLearningConfigInspector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecLearningConfigInspectorWithDefaults() *SpecLearningConfigInspector {
	this := SpecLearningConfigInspector{}
	return &this
}

// GetIgnoreRequestHeaders returns the IgnoreRequestHeaders field value
func (o *SpecLearningConfigInspector) GetIgnoreRequestHeaders() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreRequestHeaders
}

// GetIgnoreRequestHeadersOk returns a tuple with the IgnoreRequestHeaders field value
// and a boolean to check if the value has been set.
func (o *SpecLearningConfigInspector) GetIgnoreRequestHeadersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreRequestHeaders, true
}

// SetIgnoreRequestHeaders sets field value
func (o *SpecLearningConfigInspector) SetIgnoreRequestHeaders(v bool) {
	o.IgnoreRequestHeaders = v
}

// GetIgnoreResponseHeaders returns the IgnoreResponseHeaders field value
func (o *SpecLearningConfigInspector) GetIgnoreResponseHeaders() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreResponseHeaders
}

// GetIgnoreResponseHeadersOk returns a tuple with the IgnoreResponseHeaders field value
// and a boolean to check if the value has been set.
func (o *SpecLearningConfigInspector) GetIgnoreResponseHeadersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreResponseHeaders, true
}

// SetIgnoreResponseHeaders sets field value
func (o *SpecLearningConfigInspector) SetIgnoreResponseHeaders(v bool) {
	o.IgnoreResponseHeaders = v
}

// GetIgnoreQueryParams returns the IgnoreQueryParams field value
func (o *SpecLearningConfigInspector) GetIgnoreQueryParams() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreQueryParams
}

// GetIgnoreQueryParamsOk returns a tuple with the IgnoreQueryParams field value
// and a boolean to check if the value has been set.
func (o *SpecLearningConfigInspector) GetIgnoreQueryParamsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreQueryParams, true
}

// SetIgnoreQueryParams sets field value
func (o *SpecLearningConfigInspector) SetIgnoreQueryParams(v bool) {
	o.IgnoreQueryParams = v
}

// GetIgnoreRequestBody returns the IgnoreRequestBody field value
func (o *SpecLearningConfigInspector) GetIgnoreRequestBody() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreRequestBody
}

// GetIgnoreRequestBodyOk returns a tuple with the IgnoreRequestBody field value
// and a boolean to check if the value has been set.
func (o *SpecLearningConfigInspector) GetIgnoreRequestBodyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreRequestBody, true
}

// SetIgnoreRequestBody sets field value
func (o *SpecLearningConfigInspector) SetIgnoreRequestBody(v bool) {
	o.IgnoreRequestBody = v
}

// GetIgnoreResponseBody returns the IgnoreResponseBody field value
func (o *SpecLearningConfigInspector) GetIgnoreResponseBody() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreResponseBody
}

// GetIgnoreResponseBodyOk returns a tuple with the IgnoreResponseBody field value
// and a boolean to check if the value has been set.
func (o *SpecLearningConfigInspector) GetIgnoreResponseBodyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreResponseBody, true
}

// SetIgnoreResponseBody sets field value
func (o *SpecLearningConfigInspector) SetIgnoreResponseBody(v bool) {
	o.IgnoreResponseBody = v
}

func (o SpecLearningConfigInspector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecLearningConfigInspector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ignore_request_headers"] = o.IgnoreRequestHeaders
	toSerialize["ignore_response_headers"] = o.IgnoreResponseHeaders
	toSerialize["ignore_query_params"] = o.IgnoreQueryParams
	toSerialize["ignore_request_body"] = o.IgnoreRequestBody
	toSerialize["ignore_response_body"] = o.IgnoreResponseBody

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpecLearningConfigInspector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ignore_request_headers",
		"ignore_response_headers",
		"ignore_query_params",
		"ignore_request_body",
		"ignore_response_body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpecLearningConfigInspector := _SpecLearningConfigInspector{}

	err = json.Unmarshal(data, &varSpecLearningConfigInspector)

	if err != nil {
		return err
	}

	*o = SpecLearningConfigInspector(varSpecLearningConfigInspector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ignore_request_headers")
		delete(additionalProperties, "ignore_response_headers")
		delete(additionalProperties, "ignore_query_params")
		delete(additionalProperties, "ignore_request_body")
		delete(additionalProperties, "ignore_response_body")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpecLearningConfigInspector struct {
	value *SpecLearningConfigInspector
	isSet bool
}

func (v NullableSpecLearningConfigInspector) Get() *SpecLearningConfigInspector {
	return v.value
}

func (v *NullableSpecLearningConfigInspector) Set(val *SpecLearningConfigInspector) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecLearningConfigInspector) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecLearningConfigInspector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecLearningConfigInspector(val *SpecLearningConfigInspector) *NullableSpecLearningConfigInspector {
	return &NullableSpecLearningConfigInspector{value: val, isSet: true}
}

func (v NullableSpecLearningConfigInspector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecLearningConfigInspector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}