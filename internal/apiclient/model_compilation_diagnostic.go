/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the CompilationDiagnostic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompilationDiagnostic{}

// CompilationDiagnostic struct for CompilationDiagnostic
type CompilationDiagnostic struct {
	Code                 int32                      `json:"code"`
	Category             int32                      `json:"category"`
	Message              string                     `json:"message"`
	Range                CompilationDiagnosticRange `json:"range"`
	AdditionalProperties map[string]interface{}
}

type _CompilationDiagnostic CompilationDiagnostic

// NewCompilationDiagnostic instantiates a new CompilationDiagnostic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompilationDiagnostic(code int32, category int32, message string, range_ CompilationDiagnosticRange) *CompilationDiagnostic {
	this := CompilationDiagnostic{}
	this.Code = code
	this.Category = category
	this.Message = message
	this.Range = range_
	return &this
}

// NewCompilationDiagnosticWithDefaults instantiates a new CompilationDiagnostic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompilationDiagnosticWithDefaults() *CompilationDiagnostic {
	this := CompilationDiagnostic{}
	return &this
}

// GetCode returns the Code field value
func (o *CompilationDiagnostic) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostic) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CompilationDiagnostic) SetCode(v int32) {
	o.Code = v
}

// GetCategory returns the Category field value
func (o *CompilationDiagnostic) GetCategory() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostic) GetCategoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *CompilationDiagnostic) SetCategory(v int32) {
	o.Category = v
}

// GetMessage returns the Message field value
func (o *CompilationDiagnostic) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostic) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CompilationDiagnostic) SetMessage(v string) {
	o.Message = v
}

// GetRange returns the Range field value
func (o *CompilationDiagnostic) GetRange() CompilationDiagnosticRange {
	if o == nil {
		var ret CompilationDiagnosticRange
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *CompilationDiagnostic) GetRangeOk() (*CompilationDiagnosticRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *CompilationDiagnostic) SetRange(v CompilationDiagnosticRange) {
	o.Range = v
}

func (o CompilationDiagnostic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompilationDiagnostic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["category"] = o.Category
	toSerialize["message"] = o.Message
	toSerialize["range"] = o.Range

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompilationDiagnostic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"category",
		"message",
		"range",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompilationDiagnostic := _CompilationDiagnostic{}

	err = json.Unmarshal(data, &varCompilationDiagnostic)

	if err != nil {
		return err
	}

	*o = CompilationDiagnostic(varCompilationDiagnostic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "category")
		delete(additionalProperties, "message")
		delete(additionalProperties, "range")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompilationDiagnostic struct {
	value *CompilationDiagnostic
	isSet bool
}

func (v NullableCompilationDiagnostic) Get() *CompilationDiagnostic {
	return v.value
}

func (v *NullableCompilationDiagnostic) Set(val *CompilationDiagnostic) {
	v.value = val
	v.isSet = true
}

func (v NullableCompilationDiagnostic) IsSet() bool {
	return v.isSet
}

func (v *NullableCompilationDiagnostic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompilationDiagnostic(val *CompilationDiagnostic) *NullableCompilationDiagnostic {
	return &NullableCompilationDiagnostic{value: val, isSet: true}
}

func (v NullableCompilationDiagnostic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompilationDiagnostic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
