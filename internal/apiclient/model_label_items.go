/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the LabelItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelItems{}

// LabelItems struct for LabelItems
type LabelItems struct {
	Rules                []string `json:"rules"`
	AdditionalProperties map[string]interface{}
}

type _LabelItems LabelItems

// NewLabelItems instantiates a new LabelItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelItems(rules []string) *LabelItems {
	this := LabelItems{}
	this.Rules = rules
	return &this
}

// NewLabelItemsWithDefaults instantiates a new LabelItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelItemsWithDefaults() *LabelItems {
	this := LabelItems{}
	return &this
}

// GetRules returns the Rules field value
func (o *LabelItems) GetRules() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *LabelItems) GetRulesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *LabelItems) SetRules(v []string) {
	o.Rules = v
}

func (o LabelItems) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rules"] = o.Rules

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LabelItems) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelItems := _LabelItems{}

	err = json.Unmarshal(data, &varLabelItems)

	if err != nil {
		return err
	}

	*o = LabelItems(varLabelItems)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLabelItems struct {
	value *LabelItems
	isSet bool
}

func (v NullableLabelItems) Get() *LabelItems {
	return v.value
}

func (v *NullableLabelItems) Set(val *LabelItems) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelItems) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelItems(val *LabelItems) *NullableLabelItems {
	return &NullableLabelItems{value: val, isSet: true}
}

func (v NullableLabelItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
