/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// RulesTestCaseAssertionConditionPresence The condition to be met for the assertion to pass.
type RulesTestCaseAssertionConditionPresence string

// List of rules_test_case_assertion_condition_presence
const (
	CONTAINS     RulesTestCaseAssertionConditionPresence = "contains"
	NOT_CONTAINS RulesTestCaseAssertionConditionPresence = "not_contains"
)

// All allowed values of RulesTestCaseAssertionConditionPresence enum
var AllowedRulesTestCaseAssertionConditionPresenceEnumValues = []RulesTestCaseAssertionConditionPresence{
	"contains",
	"not_contains",
}

func (v *RulesTestCaseAssertionConditionPresence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RulesTestCaseAssertionConditionPresence(value)
	for _, existing := range AllowedRulesTestCaseAssertionConditionPresenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RulesTestCaseAssertionConditionPresence", value)
}

// NewRulesTestCaseAssertionConditionPresenceFromValue returns a pointer to a valid RulesTestCaseAssertionConditionPresence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRulesTestCaseAssertionConditionPresenceFromValue(v string) (*RulesTestCaseAssertionConditionPresence, error) {
	ev := RulesTestCaseAssertionConditionPresence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RulesTestCaseAssertionConditionPresence: valid values are %v", v, AllowedRulesTestCaseAssertionConditionPresenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RulesTestCaseAssertionConditionPresence) IsValid() bool {
	for _, existing := range AllowedRulesTestCaseAssertionConditionPresenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rules_test_case_assertion_condition_presence value
func (v RulesTestCaseAssertionConditionPresence) Ptr() *RulesTestCaseAssertionConditionPresence {
	return &v
}

type NullableRulesTestCaseAssertionConditionPresence struct {
	value *RulesTestCaseAssertionConditionPresence
	isSet bool
}

func (v NullableRulesTestCaseAssertionConditionPresence) Get() *RulesTestCaseAssertionConditionPresence {
	return v.value
}

func (v *NullableRulesTestCaseAssertionConditionPresence) Set(val *RulesTestCaseAssertionConditionPresence) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesTestCaseAssertionConditionPresence) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesTestCaseAssertionConditionPresence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesTestCaseAssertionConditionPresence(val *RulesTestCaseAssertionConditionPresence) *NullableRulesTestCaseAssertionConditionPresence {
	return &NullableRulesTestCaseAssertionConditionPresence{value: val, isSet: true}
}

func (v NullableRulesTestCaseAssertionConditionPresence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesTestCaseAssertionConditionPresence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
