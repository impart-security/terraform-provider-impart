/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ListPatchBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPatchBody{}

// ListPatchBody struct for ListPatchBody
type ListPatchBody struct {
	// The new name of the list.
	Name *string `json:"name,omitempty"`
	// The items in the list.
	Add []ListItemsInner `json:"add,omitempty"`
	// Items to remove from the list.
	Remove []string `json:"remove,omitempty"`
}

// NewListPatchBody instantiates a new ListPatchBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPatchBody() *ListPatchBody {
	this := ListPatchBody{}
	return &this
}

// NewListPatchBodyWithDefaults instantiates a new ListPatchBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPatchBodyWithDefaults() *ListPatchBody {
	this := ListPatchBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListPatchBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPatchBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListPatchBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListPatchBody) SetName(v string) {
	o.Name = &v
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *ListPatchBody) GetAdd() []ListItemsInner {
	if o == nil || IsNil(o.Add) {
		var ret []ListItemsInner
		return ret
	}
	return o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPatchBody) GetAddOk() ([]ListItemsInner, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *ListPatchBody) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given []ListItemsInner and assigns it to the Add field.
func (o *ListPatchBody) SetAdd(v []ListItemsInner) {
	o.Add = v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *ListPatchBody) GetRemove() []string {
	if o == nil || IsNil(o.Remove) {
		var ret []string
		return ret
	}
	return o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPatchBody) GetRemoveOk() ([]string, bool) {
	if o == nil || IsNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *ListPatchBody) HasRemove() bool {
	if o != nil && !IsNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given []string and assigns it to the Remove field.
func (o *ListPatchBody) SetRemove(v []string) {
	o.Remove = v
}

func (o ListPatchBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPatchBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	return toSerialize, nil
}

type NullableListPatchBody struct {
	value *ListPatchBody
	isSet bool
}

func (v NullableListPatchBody) Get() *ListPatchBody {
	return v.value
}

func (v *NullableListPatchBody) Set(val *ListPatchBody) {
	v.value = val
	v.isSet = true
}

func (v NullableListPatchBody) IsSet() bool {
	return v.isSet
}

func (v *NullableListPatchBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPatchBody(val *ListPatchBody) *NullableListPatchBody {
	return &NullableListPatchBody{value: val, isSet: true}
}

func (v NullableListPatchBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPatchBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
