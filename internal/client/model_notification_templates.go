/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationTemplates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationTemplates{}

// NotificationTemplates struct for NotificationTemplates
type NotificationTemplates struct {
	// A list of notification templates.
	Items []NotificationTemplate `json:"items"`
	Meta  CollectionMeta         `json:"meta"`
}

type _NotificationTemplates NotificationTemplates

// NewNotificationTemplates instantiates a new NotificationTemplates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationTemplates(items []NotificationTemplate, meta CollectionMeta) *NotificationTemplates {
	this := NotificationTemplates{}
	this.Items = items
	this.Meta = meta
	return &this
}

// NewNotificationTemplatesWithDefaults instantiates a new NotificationTemplates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTemplatesWithDefaults() *NotificationTemplates {
	this := NotificationTemplates{}
	return &this
}

// GetItems returns the Items field value
func (o *NotificationTemplates) GetItems() []NotificationTemplate {
	if o == nil {
		var ret []NotificationTemplate
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *NotificationTemplates) GetItemsOk() ([]NotificationTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *NotificationTemplates) SetItems(v []NotificationTemplate) {
	o.Items = v
}

// GetMeta returns the Meta field value
func (o *NotificationTemplates) GetMeta() CollectionMeta {
	if o == nil {
		var ret CollectionMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *NotificationTemplates) GetMetaOk() (*CollectionMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *NotificationTemplates) SetMeta(v CollectionMeta) {
	o.Meta = v
}

func (o NotificationTemplates) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationTemplates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["meta"] = o.Meta
	return toSerialize, nil
}

func (o *NotificationTemplates) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationTemplates := _NotificationTemplates{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationTemplates)

	if err != nil {
		return err
	}

	*o = NotificationTemplates(varNotificationTemplates)

	return err
}

type NullableNotificationTemplates struct {
	value *NotificationTemplates
	isSet bool
}

func (v NullableNotificationTemplates) Get() *NotificationTemplates {
	return v.value
}

func (v *NullableNotificationTemplates) Set(val *NotificationTemplates) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTemplates) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTemplates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTemplates(val *NotificationTemplates) *NullableNotificationTemplates {
	return &NullableNotificationTemplates{value: val, isSet: true}
}

func (v NullableNotificationTemplates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTemplates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
