/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the RulesScriptPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RulesScriptPostBody{}

// RulesScriptPostBody struct for RulesScriptPostBody
type RulesScriptPostBody struct {
	Name                 string              `json:"name"`
	Description          *string             `json:"description,omitempty"`
	Disabled             bool                `json:"disabled"`
	BlockingEffect       *BlockingEffectType `json:"blocking_effect,omitempty"`
	Src                  string              `json:"src"`
	AdditionalProperties map[string]interface{}
}

type _RulesScriptPostBody RulesScriptPostBody

// NewRulesScriptPostBody instantiates a new RulesScriptPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesScriptPostBody(name string, disabled bool, src string) *RulesScriptPostBody {
	this := RulesScriptPostBody{}
	this.Name = name
	this.Disabled = disabled
	this.Src = src
	return &this
}

// NewRulesScriptPostBodyWithDefaults instantiates a new RulesScriptPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesScriptPostBodyWithDefaults() *RulesScriptPostBody {
	this := RulesScriptPostBody{}
	var blockingEffect BlockingEffectType = BLOCK
	this.BlockingEffect = &blockingEffect
	return &this
}

// GetName returns the Name field value
func (o *RulesScriptPostBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RulesScriptPostBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RulesScriptPostBody) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RulesScriptPostBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesScriptPostBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RulesScriptPostBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RulesScriptPostBody) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value
func (o *RulesScriptPostBody) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *RulesScriptPostBody) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *RulesScriptPostBody) SetDisabled(v bool) {
	o.Disabled = v
}

// GetBlockingEffect returns the BlockingEffect field value if set, zero value otherwise.
func (o *RulesScriptPostBody) GetBlockingEffect() BlockingEffectType {
	if o == nil || IsNil(o.BlockingEffect) {
		var ret BlockingEffectType
		return ret
	}
	return *o.BlockingEffect
}

// GetBlockingEffectOk returns a tuple with the BlockingEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesScriptPostBody) GetBlockingEffectOk() (*BlockingEffectType, bool) {
	if o == nil || IsNil(o.BlockingEffect) {
		return nil, false
	}
	return o.BlockingEffect, true
}

// HasBlockingEffect returns a boolean if a field has been set.
func (o *RulesScriptPostBody) HasBlockingEffect() bool {
	if o != nil && !IsNil(o.BlockingEffect) {
		return true
	}

	return false
}

// SetBlockingEffect gets a reference to the given BlockingEffectType and assigns it to the BlockingEffect field.
func (o *RulesScriptPostBody) SetBlockingEffect(v BlockingEffectType) {
	o.BlockingEffect = &v
}

// GetSrc returns the Src field value
func (o *RulesScriptPostBody) GetSrc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Src
}

// GetSrcOk returns a tuple with the Src field value
// and a boolean to check if the value has been set.
func (o *RulesScriptPostBody) GetSrcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Src, true
}

// SetSrc sets field value
func (o *RulesScriptPostBody) SetSrc(v string) {
	o.Src = v
}

func (o RulesScriptPostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RulesScriptPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.BlockingEffect) {
		toSerialize["blocking_effect"] = o.BlockingEffect
	}
	toSerialize["src"] = o.Src

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RulesScriptPostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"disabled",
		"src",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRulesScriptPostBody := _RulesScriptPostBody{}

	err = json.Unmarshal(data, &varRulesScriptPostBody)

	if err != nil {
		return err
	}

	*o = RulesScriptPostBody(varRulesScriptPostBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "blocking_effect")
		delete(additionalProperties, "src")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRulesScriptPostBody struct {
	value *RulesScriptPostBody
	isSet bool
}

func (v NullableRulesScriptPostBody) Get() *RulesScriptPostBody {
	return v.value
}

func (v *NullableRulesScriptPostBody) Set(val *RulesScriptPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesScriptPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesScriptPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesScriptPostBody(val *RulesScriptPostBody) *NullableRulesScriptPostBody {
	return &NullableRulesScriptPostBody{value: val, isSet: true}
}

func (v NullableRulesScriptPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesScriptPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
