/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the List type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &List{}

// List struct for List
type List struct {
	// ID of the list.
	Id string `json:"id"`
	// The name of the list.
	Name string `json:"name"`
	// User ID of the user that created the list.
	CreatedBy string `json:"created_by"`
	// The date the list was created.
	CreatedAt     time.Time         `json:"created_at"`
	Kind          ListKind          `json:"kind"`
	Subkind       *ListSubkind      `json:"subkind,omitempty"`
	Functionality ListFunctionality `json:"functionality"`
	// The items in the list.
	Items                []ListItemsInner `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _List List

// NewList instantiates a new List object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewList(id string, name string, createdBy string, createdAt time.Time, kind ListKind, functionality ListFunctionality, items []ListItemsInner) *List {
	this := List{}
	this.Id = id
	this.Name = name
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	this.Kind = kind
	this.Functionality = functionality
	this.Items = items
	return &this
}

// NewListWithDefaults instantiates a new List object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWithDefaults() *List {
	this := List{}
	var functionality ListFunctionality = ADD_REMOVE
	this.Functionality = functionality
	return &this
}

// GetId returns the Id field value
func (o *List) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *List) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *List) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *List) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *List) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *List) SetName(v string) {
	o.Name = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *List) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *List) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *List) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *List) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *List) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *List) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetKind returns the Kind field value
func (o *List) GetKind() ListKind {
	if o == nil {
		var ret ListKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *List) GetKindOk() (*ListKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *List) SetKind(v ListKind) {
	o.Kind = v
}

// GetSubkind returns the Subkind field value if set, zero value otherwise.
func (o *List) GetSubkind() ListSubkind {
	if o == nil || IsNil(o.Subkind) {
		var ret ListSubkind
		return ret
	}
	return *o.Subkind
}

// GetSubkindOk returns a tuple with the Subkind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *List) GetSubkindOk() (*ListSubkind, bool) {
	if o == nil || IsNil(o.Subkind) {
		return nil, false
	}
	return o.Subkind, true
}

// HasSubkind returns a boolean if a field has been set.
func (o *List) HasSubkind() bool {
	if o != nil && !IsNil(o.Subkind) {
		return true
	}

	return false
}

// SetSubkind gets a reference to the given ListSubkind and assigns it to the Subkind field.
func (o *List) SetSubkind(v ListSubkind) {
	o.Subkind = &v
}

// GetFunctionality returns the Functionality field value
func (o *List) GetFunctionality() ListFunctionality {
	if o == nil {
		var ret ListFunctionality
		return ret
	}

	return o.Functionality
}

// GetFunctionalityOk returns a tuple with the Functionality field value
// and a boolean to check if the value has been set.
func (o *List) GetFunctionalityOk() (*ListFunctionality, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Functionality, true
}

// SetFunctionality sets field value
func (o *List) SetFunctionality(v ListFunctionality) {
	o.Functionality = v
}

// GetItems returns the Items field value
func (o *List) GetItems() []ListItemsInner {
	if o == nil {
		var ret []ListItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *List) GetItemsOk() ([]ListItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *List) SetItems(v []ListItemsInner) {
	o.Items = v
}

func (o List) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o List) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["kind"] = o.Kind
	if !IsNil(o.Subkind) {
		toSerialize["subkind"] = o.Subkind
	}
	toSerialize["functionality"] = o.Functionality
	toSerialize["items"] = o.Items

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *List) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"created_by",
		"created_at",
		"kind",
		"functionality",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varList := _List{}

	err = json.Unmarshal(data, &varList)

	if err != nil {
		return err
	}

	*o = List(varList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "subkind")
		delete(additionalProperties, "functionality")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableList struct {
	value *List
	isSet bool
}

func (v NullableList) Get() *List {
	return v.value
}

func (v *NullableList) Set(val *List) {
	v.value = val
	v.isSet = true
}

func (v NullableList) IsSet() bool {
	return v.isSet
}

func (v *NullableList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableList(val *List) *NullableList {
	return &NullableList{value: val, isSet: true}
}

func (v NullableList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
