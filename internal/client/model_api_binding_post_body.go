/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiBindingPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiBindingPostBody{}

// ApiBindingPostBody struct for ApiBindingPostBody
type ApiBindingPostBody struct {
	Name           string   `json:"name"`
	Disabled       *bool    `json:"disabled,omitempty"`
	SpecId         string   `json:"spec_id"`
	Hostname       string   `json:"hostname"`
	Port           int32    `json:"port"`
	BasePath       string   `json:"base_path"`
	UpstreamOrigin *string  `json:"upstream_origin,omitempty"`
	Hops           *int32   `json:"hops,omitempty"`
	UseForwarded   *bool    `json:"use_forwarded,omitempty"`
	ForwardedFor   []string `json:"forwarded_for,omitempty"`
	ForwardedHost  []string `json:"forwarded_host,omitempty"`
	ForwardedProto []string `json:"forwarded_proto,omitempty"`
	ForwardedId    []string `json:"forwarded_id,omitempty"`
}

type _ApiBindingPostBody ApiBindingPostBody

// NewApiBindingPostBody instantiates a new ApiBindingPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiBindingPostBody(name string, specId string, hostname string, port int32, basePath string) *ApiBindingPostBody {
	this := ApiBindingPostBody{}
	this.Name = name
	var disabled bool = false
	this.Disabled = &disabled
	this.SpecId = specId
	this.Hostname = hostname
	this.Port = port
	this.BasePath = basePath
	return &this
}

// NewApiBindingPostBodyWithDefaults instantiates a new ApiBindingPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiBindingPostBodyWithDefaults() *ApiBindingPostBody {
	this := ApiBindingPostBody{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// GetName returns the Name field value
func (o *ApiBindingPostBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiBindingPostBody) SetName(v string) {
	o.Name = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *ApiBindingPostBody) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetSpecId returns the SpecId field value
func (o *ApiBindingPostBody) GetSpecId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecId
}

// GetSpecIdOk returns a tuple with the SpecId field value
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetSpecIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecId, true
}

// SetSpecId sets field value
func (o *ApiBindingPostBody) SetSpecId(v string) {
	o.SpecId = v
}

// GetHostname returns the Hostname field value
func (o *ApiBindingPostBody) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ApiBindingPostBody) SetHostname(v string) {
	o.Hostname = v
}

// GetPort returns the Port field value
func (o *ApiBindingPostBody) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ApiBindingPostBody) SetPort(v int32) {
	o.Port = v
}

// GetBasePath returns the BasePath field value
func (o *ApiBindingPostBody) GetBasePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BasePath
}

// GetBasePathOk returns a tuple with the BasePath field value
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetBasePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasePath, true
}

// SetBasePath sets field value
func (o *ApiBindingPostBody) SetBasePath(v string) {
	o.BasePath = v
}

// GetUpstreamOrigin returns the UpstreamOrigin field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetUpstreamOrigin() string {
	if o == nil || IsNil(o.UpstreamOrigin) {
		var ret string
		return ret
	}
	return *o.UpstreamOrigin
}

// GetUpstreamOriginOk returns a tuple with the UpstreamOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetUpstreamOriginOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamOrigin) {
		return nil, false
	}
	return o.UpstreamOrigin, true
}

// HasUpstreamOrigin returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasUpstreamOrigin() bool {
	if o != nil && !IsNil(o.UpstreamOrigin) {
		return true
	}

	return false
}

// SetUpstreamOrigin gets a reference to the given string and assigns it to the UpstreamOrigin field.
func (o *ApiBindingPostBody) SetUpstreamOrigin(v string) {
	o.UpstreamOrigin = &v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetHops() int32 {
	if o == nil || IsNil(o.Hops) {
		var ret int32
		return ret
	}
	return *o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetHopsOk() (*int32, bool) {
	if o == nil || IsNil(o.Hops) {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasHops() bool {
	if o != nil && !IsNil(o.Hops) {
		return true
	}

	return false
}

// SetHops gets a reference to the given int32 and assigns it to the Hops field.
func (o *ApiBindingPostBody) SetHops(v int32) {
	o.Hops = &v
}

// GetUseForwarded returns the UseForwarded field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetUseForwarded() bool {
	if o == nil || IsNil(o.UseForwarded) {
		var ret bool
		return ret
	}
	return *o.UseForwarded
}

// GetUseForwardedOk returns a tuple with the UseForwarded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetUseForwardedOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwarded) {
		return nil, false
	}
	return o.UseForwarded, true
}

// HasUseForwarded returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasUseForwarded() bool {
	if o != nil && !IsNil(o.UseForwarded) {
		return true
	}

	return false
}

// SetUseForwarded gets a reference to the given bool and assigns it to the UseForwarded field.
func (o *ApiBindingPostBody) SetUseForwarded(v bool) {
	o.UseForwarded = &v
}

// GetForwardedFor returns the ForwardedFor field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetForwardedFor() []string {
	if o == nil || IsNil(o.ForwardedFor) {
		var ret []string
		return ret
	}
	return o.ForwardedFor
}

// GetForwardedForOk returns a tuple with the ForwardedFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetForwardedForOk() ([]string, bool) {
	if o == nil || IsNil(o.ForwardedFor) {
		return nil, false
	}
	return o.ForwardedFor, true
}

// HasForwardedFor returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasForwardedFor() bool {
	if o != nil && !IsNil(o.ForwardedFor) {
		return true
	}

	return false
}

// SetForwardedFor gets a reference to the given []string and assigns it to the ForwardedFor field.
func (o *ApiBindingPostBody) SetForwardedFor(v []string) {
	o.ForwardedFor = v
}

// GetForwardedHost returns the ForwardedHost field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetForwardedHost() []string {
	if o == nil || IsNil(o.ForwardedHost) {
		var ret []string
		return ret
	}
	return o.ForwardedHost
}

// GetForwardedHostOk returns a tuple with the ForwardedHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetForwardedHostOk() ([]string, bool) {
	if o == nil || IsNil(o.ForwardedHost) {
		return nil, false
	}
	return o.ForwardedHost, true
}

// HasForwardedHost returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasForwardedHost() bool {
	if o != nil && !IsNil(o.ForwardedHost) {
		return true
	}

	return false
}

// SetForwardedHost gets a reference to the given []string and assigns it to the ForwardedHost field.
func (o *ApiBindingPostBody) SetForwardedHost(v []string) {
	o.ForwardedHost = v
}

// GetForwardedProto returns the ForwardedProto field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetForwardedProto() []string {
	if o == nil || IsNil(o.ForwardedProto) {
		var ret []string
		return ret
	}
	return o.ForwardedProto
}

// GetForwardedProtoOk returns a tuple with the ForwardedProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetForwardedProtoOk() ([]string, bool) {
	if o == nil || IsNil(o.ForwardedProto) {
		return nil, false
	}
	return o.ForwardedProto, true
}

// HasForwardedProto returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasForwardedProto() bool {
	if o != nil && !IsNil(o.ForwardedProto) {
		return true
	}

	return false
}

// SetForwardedProto gets a reference to the given []string and assigns it to the ForwardedProto field.
func (o *ApiBindingPostBody) SetForwardedProto(v []string) {
	o.ForwardedProto = v
}

// GetForwardedId returns the ForwardedId field value if set, zero value otherwise.
func (o *ApiBindingPostBody) GetForwardedId() []string {
	if o == nil || IsNil(o.ForwardedId) {
		var ret []string
		return ret
	}
	return o.ForwardedId
}

// GetForwardedIdOk returns a tuple with the ForwardedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiBindingPostBody) GetForwardedIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ForwardedId) {
		return nil, false
	}
	return o.ForwardedId, true
}

// HasForwardedId returns a boolean if a field has been set.
func (o *ApiBindingPostBody) HasForwardedId() bool {
	if o != nil && !IsNil(o.ForwardedId) {
		return true
	}

	return false
}

// SetForwardedId gets a reference to the given []string and assigns it to the ForwardedId field.
func (o *ApiBindingPostBody) SetForwardedId(v []string) {
	o.ForwardedId = v
}

func (o ApiBindingPostBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiBindingPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["spec_id"] = o.SpecId
	toSerialize["hostname"] = o.Hostname
	toSerialize["port"] = o.Port
	toSerialize["base_path"] = o.BasePath
	if !IsNil(o.UpstreamOrigin) {
		toSerialize["upstream_origin"] = o.UpstreamOrigin
	}
	if !IsNil(o.Hops) {
		toSerialize["hops"] = o.Hops
	}
	if !IsNil(o.UseForwarded) {
		toSerialize["use_forwarded"] = o.UseForwarded
	}
	if !IsNil(o.ForwardedFor) {
		toSerialize["forwarded_for"] = o.ForwardedFor
	}
	if !IsNil(o.ForwardedHost) {
		toSerialize["forwarded_host"] = o.ForwardedHost
	}
	if !IsNil(o.ForwardedProto) {
		toSerialize["forwarded_proto"] = o.ForwardedProto
	}
	if !IsNil(o.ForwardedId) {
		toSerialize["forwarded_id"] = o.ForwardedId
	}
	return toSerialize, nil
}

func (o *ApiBindingPostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"spec_id",
		"hostname",
		"port",
		"base_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiBindingPostBody := _ApiBindingPostBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))

	err = decoder.Decode(&varApiBindingPostBody)

	if err != nil {
		return err
	}

	*o = ApiBindingPostBody(varApiBindingPostBody)

	return err
}

type NullableApiBindingPostBody struct {
	value *ApiBindingPostBody
	isSet bool
}

func (v NullableApiBindingPostBody) Get() *ApiBindingPostBody {
	return v.value
}

func (v *NullableApiBindingPostBody) Set(val *ApiBindingPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableApiBindingPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableApiBindingPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiBindingPostBody(val *ApiBindingPostBody) *NullableApiBindingPostBody {
	return &NullableApiBindingPostBody{value: val, isSet: true}
}

func (v NullableApiBindingPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiBindingPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
