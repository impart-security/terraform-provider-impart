/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EventMonitorConditionDetails - struct for EventMonitorConditionDetails
type EventMonitorConditionDetails struct {
	EventMonitorConditionEvent  *EventMonitorConditionEvent
	EventMonitorConditionMetric *EventMonitorConditionMetric
}

// EventMonitorConditionEventAsEventMonitorConditionDetails is a convenience function that returns EventMonitorConditionEvent wrapped in EventMonitorConditionDetails
func EventMonitorConditionEventAsEventMonitorConditionDetails(v *EventMonitorConditionEvent) EventMonitorConditionDetails {
	return EventMonitorConditionDetails{
		EventMonitorConditionEvent: v,
	}
}

// EventMonitorConditionMetricAsEventMonitorConditionDetails is a convenience function that returns EventMonitorConditionMetric wrapped in EventMonitorConditionDetails
func EventMonitorConditionMetricAsEventMonitorConditionDetails(v *EventMonitorConditionMetric) EventMonitorConditionDetails {
	return EventMonitorConditionDetails{
		EventMonitorConditionMetric: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventMonitorConditionDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EventMonitorConditionEvent
	err = newStrictDecoder(data).Decode(&dst.EventMonitorConditionEvent)
	if err == nil {
		jsonEventMonitorConditionEvent, _ := json.Marshal(dst.EventMonitorConditionEvent)
		if string(jsonEventMonitorConditionEvent) == "{}" { // empty struct
			dst.EventMonitorConditionEvent = nil
		} else {
			match++
		}
	} else {
		dst.EventMonitorConditionEvent = nil
	}

	// try to unmarshal data into EventMonitorConditionMetric
	err = newStrictDecoder(data).Decode(&dst.EventMonitorConditionMetric)
	if err == nil {
		jsonEventMonitorConditionMetric, _ := json.Marshal(dst.EventMonitorConditionMetric)
		if string(jsonEventMonitorConditionMetric) == "{}" { // empty struct
			dst.EventMonitorConditionMetric = nil
		} else {
			match++
		}
	} else {
		dst.EventMonitorConditionMetric = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EventMonitorConditionEvent = nil
		dst.EventMonitorConditionMetric = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EventMonitorConditionDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EventMonitorConditionDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventMonitorConditionDetails) MarshalJSON() ([]byte, error) {
	if src.EventMonitorConditionEvent != nil {
		return json.Marshal(&src.EventMonitorConditionEvent)
	}

	if src.EventMonitorConditionMetric != nil {
		return json.Marshal(&src.EventMonitorConditionMetric)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventMonitorConditionDetails) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EventMonitorConditionEvent != nil {
		return obj.EventMonitorConditionEvent
	}

	if obj.EventMonitorConditionMetric != nil {
		return obj.EventMonitorConditionMetric
	}

	// all schemas are nil
	return nil
}

type NullableEventMonitorConditionDetails struct {
	value *EventMonitorConditionDetails
	isSet bool
}

func (v NullableEventMonitorConditionDetails) Get() *EventMonitorConditionDetails {
	return v.value
}

func (v *NullableEventMonitorConditionDetails) Set(val *EventMonitorConditionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMonitorConditionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMonitorConditionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMonitorConditionDetails(val *EventMonitorConditionDetails) *NullableEventMonitorConditionDetails {
	return &NullableEventMonitorConditionDetails{value: val, isSet: true}
}

func (v NullableEventMonitorConditionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMonitorConditionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
