/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// BlockingEffectType A string representing the type of blocking effect.
type BlockingEffectType string

// List of blocking_effect_type
const (
	BLOCK    BlockingEffectType = "block"
	SIMULATE BlockingEffectType = "simulate"
)

// All allowed values of BlockingEffectType enum
var AllowedBlockingEffectTypeEnumValues = []BlockingEffectType{
	"block",
	"simulate",
}

func (v *BlockingEffectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockingEffectType(value)
	for _, existing := range AllowedBlockingEffectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockingEffectType", value)
}

// NewBlockingEffectTypeFromValue returns a pointer to a valid BlockingEffectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockingEffectTypeFromValue(v string) (*BlockingEffectType, error) {
	ev := BlockingEffectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockingEffectType: valid values are %v", v, AllowedBlockingEffectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockingEffectType) IsValid() bool {
	for _, existing := range AllowedBlockingEffectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blocking_effect_type value
func (v BlockingEffectType) Ptr() *BlockingEffectType {
	return &v
}

type NullableBlockingEffectType struct {
	value *BlockingEffectType
	isSet bool
}

func (v NullableBlockingEffectType) Get() *BlockingEffectType {
	return v.value
}

func (v *NullableBlockingEffectType) Set(val *BlockingEffectType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockingEffectType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockingEffectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockingEffectType(val *BlockingEffectType) *NullableBlockingEffectType {
	return &NullableBlockingEffectType{value: val, isSet: true}
}

func (v NullableBlockingEffectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockingEffectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
