/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CollectionMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionMeta{}

// CollectionMeta Metadata about the collection.
type CollectionMeta struct {
	// Total number of items available in the collection on the server.
	Total int64 `json:"total"`
	// Maximum number of items that can returned in the response. The actual number of items returned may be less than the specified max_results.
	MaxResults int32 `json:"max_results"`
}

type _CollectionMeta CollectionMeta

// NewCollectionMeta instantiates a new CollectionMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionMeta(total int64, maxResults int32) *CollectionMeta {
	this := CollectionMeta{}
	this.Total = total
	this.MaxResults = maxResults
	return &this
}

// NewCollectionMetaWithDefaults instantiates a new CollectionMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionMetaWithDefaults() *CollectionMeta {
	this := CollectionMeta{}
	return &this
}

// GetTotal returns the Total field value
func (o *CollectionMeta) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CollectionMeta) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CollectionMeta) SetTotal(v int64) {
	o.Total = v
}

// GetMaxResults returns the MaxResults field value
func (o *CollectionMeta) GetMaxResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value
// and a boolean to check if the value has been set.
func (o *CollectionMeta) GetMaxResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxResults, true
}

// SetMaxResults sets field value
func (o *CollectionMeta) SetMaxResults(v int32) {
	o.MaxResults = v
}

func (o CollectionMeta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["max_results"] = o.MaxResults
	return toSerialize, nil
}

func (o *CollectionMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"max_results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCollectionMeta := _CollectionMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))

	err = decoder.Decode(&varCollectionMeta)

	if err != nil {
		return err
	}

	*o = CollectionMeta(varCollectionMeta)

	return err
}

type NullableCollectionMeta struct {
	value *CollectionMeta
	isSet bool
}

func (v NullableCollectionMeta) Get() *CollectionMeta {
	return v.value
}

func (v *NullableCollectionMeta) Set(val *CollectionMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionMeta(val *CollectionMeta) *NullableCollectionMeta {
	return &NullableCollectionMeta{value: val, isSet: true}
}

func (v NullableCollectionMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
