/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ListKind The kind of list.
type ListKind string

// List of list_kind
const (
	STRING  ListKind = "string"
	UUID    ListKind = "uuid"
	IP      ListKind = "ip"
	COUNTRY ListKind = "country"
	PATH    ListKind = "path"
	ASN     ListKind = "asn"
)

// All allowed values of ListKind enum
var AllowedListKindEnumValues = []ListKind{
	"string",
	"uuid",
	"ip",
	"country",
	"path",
	"asn",
}

func (v *ListKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListKind(value)
	for _, existing := range AllowedListKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListKind", value)
}

// NewListKindFromValue returns a pointer to a valid ListKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListKindFromValue(v string) (*ListKind, error) {
	ev := ListKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListKind: valid values are %v", v, AllowedListKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListKind) IsValid() bool {
	for _, existing := range AllowedListKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to list_kind value
func (v ListKind) Ptr() *ListKind {
	return &v
}

type NullableListKind struct {
	value *ListKind
	isSet bool
}

func (v NullableListKind) Get() *ListKind {
	return v.value
}

func (v *NullableListKind) Set(val *ListKind) {
	v.value = val
	v.isSet = true
}

func (v NullableListKind) IsSet() bool {
	return v.isSet
}

func (v *NullableListKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListKind(val *ListKind) *NullableListKind {
	return &NullableListKind{value: val, isSet: true}
}

func (v NullableListKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
