/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConnectorPutBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorPutBody{}

// ConnectorPutBody struct for ConnectorPutBody
type ConnectorPutBody struct {
	// The name of the connector and what it represents.
	Name string `json:"name"`
	// A list of connector destinations.
	Destinations []ConnectorDestination `json:"destinations"`
}

type _ConnectorPutBody ConnectorPutBody

// NewConnectorPutBody instantiates a new ConnectorPutBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorPutBody(name string, destinations []ConnectorDestination) *ConnectorPutBody {
	this := ConnectorPutBody{}
	this.Name = name
	this.Destinations = destinations
	return &this
}

// NewConnectorPutBodyWithDefaults instantiates a new ConnectorPutBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorPutBodyWithDefaults() *ConnectorPutBody {
	this := ConnectorPutBody{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectorPutBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorPutBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorPutBody) SetName(v string) {
	o.Name = v
}

// GetDestinations returns the Destinations field value
func (o *ConnectorPutBody) GetDestinations() []ConnectorDestination {
	if o == nil {
		var ret []ConnectorDestination
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *ConnectorPutBody) GetDestinationsOk() ([]ConnectorDestination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *ConnectorPutBody) SetDestinations(v []ConnectorDestination) {
	o.Destinations = v
}

func (o ConnectorPutBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorPutBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["destinations"] = o.Destinations
	return toSerialize, nil
}

func (o *ConnectorPutBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"destinations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorPutBody := _ConnectorPutBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))

	err = decoder.Decode(&varConnectorPutBody)

	if err != nil {
		return err
	}

	*o = ConnectorPutBody(varConnectorPutBody)

	return err
}

type NullableConnectorPutBody struct {
	value *ConnectorPutBody
	isSet bool
}

func (v NullableConnectorPutBody) Get() *ConnectorPutBody {
	return v.value
}

func (v *NullableConnectorPutBody) Set(val *ConnectorPutBody) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorPutBody) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorPutBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorPutBody(val *ConnectorPutBody) *NullableConnectorPutBody {
	return &NullableConnectorPutBody{value: val, isSet: true}
}

func (v NullableConnectorPutBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorPutBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
