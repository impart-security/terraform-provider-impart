/*
Impart Security v0 REST API

Imparts v0 REST API.

API version: 0.0.0
Contact: support@impart.security
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventMonitorConditionEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMonitorConditionEvent{}

// EventMonitorConditionEvent struct for EventMonitorConditionEvent
type EventMonitorConditionEvent struct {
	// The type that maps to which request schema we should be using.
	Type string `json:"type"`
	// The action taken by what the 'actor' represents
	Action *string `json:"action,omitempty"`
	// ID of the entity the actor is affecting
	Subject *string `json:"subject,omitempty"`
	// From where the event is being generated
	Source *string `json:"source,omitempty"`
	// The ID of the entity/user generating the event
	Actor *string `json:"actor,omitempty"`
	// A slug of the entity type that actor represents
	ActorType *string `json:"actor_type,omitempty"`
	// A slug of the entity type that subject represents
	SubjectType *string `json:"subject_type,omitempty"`
}

type _EventMonitorConditionEvent EventMonitorConditionEvent

// NewEventMonitorConditionEvent instantiates a new EventMonitorConditionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMonitorConditionEvent(type_ string) *EventMonitorConditionEvent {
	this := EventMonitorConditionEvent{}
	this.Type = type_
	return &this
}

// NewEventMonitorConditionEventWithDefaults instantiates a new EventMonitorConditionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMonitorConditionEventWithDefaults() *EventMonitorConditionEvent {
	this := EventMonitorConditionEvent{}
	return &this
}

// GetType returns the Type field value
func (o *EventMonitorConditionEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventMonitorConditionEvent) SetType(v string) {
	o.Type = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *EventMonitorConditionEvent) SetAction(v string) {
	o.Action = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EventMonitorConditionEvent) SetSubject(v string) {
	o.Subject = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *EventMonitorConditionEvent) SetSource(v string) {
	o.Source = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetActor() string {
	if o == nil || IsNil(o.Actor) {
		var ret string
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetActorOk() (*string, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given string and assigns it to the Actor field.
func (o *EventMonitorConditionEvent) SetActor(v string) {
	o.Actor = &v
}

// GetActorType returns the ActorType field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetActorType() string {
	if o == nil || IsNil(o.ActorType) {
		var ret string
		return ret
	}
	return *o.ActorType
}

// GetActorTypeOk returns a tuple with the ActorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetActorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActorType) {
		return nil, false
	}
	return o.ActorType, true
}

// HasActorType returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasActorType() bool {
	if o != nil && !IsNil(o.ActorType) {
		return true
	}

	return false
}

// SetActorType gets a reference to the given string and assigns it to the ActorType field.
func (o *EventMonitorConditionEvent) SetActorType(v string) {
	o.ActorType = &v
}

// GetSubjectType returns the SubjectType field value if set, zero value otherwise.
func (o *EventMonitorConditionEvent) GetSubjectType() string {
	if o == nil || IsNil(o.SubjectType) {
		var ret string
		return ret
	}
	return *o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMonitorConditionEvent) GetSubjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectType) {
		return nil, false
	}
	return o.SubjectType, true
}

// HasSubjectType returns a boolean if a field has been set.
func (o *EventMonitorConditionEvent) HasSubjectType() bool {
	if o != nil && !IsNil(o.SubjectType) {
		return true
	}

	return false
}

// SetSubjectType gets a reference to the given string and assigns it to the SubjectType field.
func (o *EventMonitorConditionEvent) SetSubjectType(v string) {
	o.SubjectType = &v
}

func (o EventMonitorConditionEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMonitorConditionEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	if !IsNil(o.ActorType) {
		toSerialize["actor_type"] = o.ActorType
	}
	if !IsNil(o.SubjectType) {
		toSerialize["subject_type"] = o.SubjectType
	}
	return toSerialize, nil
}

func (o *EventMonitorConditionEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventMonitorConditionEvent := _EventMonitorConditionEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))

	err = decoder.Decode(&varEventMonitorConditionEvent)

	if err != nil {
		return err
	}

	*o = EventMonitorConditionEvent(varEventMonitorConditionEvent)

	return err
}

type NullableEventMonitorConditionEvent struct {
	value *EventMonitorConditionEvent
	isSet bool
}

func (v NullableEventMonitorConditionEvent) Get() *EventMonitorConditionEvent {
	return v.value
}

func (v *NullableEventMonitorConditionEvent) Set(val *EventMonitorConditionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMonitorConditionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMonitorConditionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMonitorConditionEvent(val *EventMonitorConditionEvent) *NullableEventMonitorConditionEvent {
	return &NullableEventMonitorConditionEvent{value: val, isSet: true}
}

func (v NullableEventMonitorConditionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMonitorConditionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
